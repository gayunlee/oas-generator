/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v2/picks/{pickId}/like": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 내가 PickId 를 픽 또는 언픽을 합니다.
     * @description 내가 PickId 를 픽 또는 언픽을 합니다.
     */
    patch: operations["updateMyPickByPickIdV2"];
    trace?: never;
  };
  "/{contentType}/{contentId}/scrap": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * ContentId 를 스크랩 또는 언스크랩을 합니다.
     * @description ContentId 를 스크랩 또는 언스크랩을 합니다.
     */
    put: operations["updateScrapByContentId"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/follows_brief": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내가 팔로우 한 목록을 가져옵니다.
     * @description 내가 팔로우 한 목록을 가져옵니다.
     */
    get: operations["getMyFollows"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters/{masterId}/follows": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * MasterId 를 팔로우 또는 언팔로우를 합니다.
     * @description MasterId 를 팔로우 또는 언팔로우를 합니다.
     */
    put: operations["updateFollowByMasterId"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters/follows": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * MyMaster에서 팔로우를 합니다.
     * @description MyMaster에서 팔로우를 합니다.
     */
    put: operations["updateFollow"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile_edit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 내 프로필 화면을 수정합니다. */
    patch: operations["patchProfileEditScreen"];
    trace?: never;
  };
  "/tutorials": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 튜토리얼 상태값 변경 */
    patch: operations["patchIsReadTUT"];
    trace?: never;
  };
  "/masterNotice/{noticeId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 마스터 공지사항 읽음 처리 */
    patch: operations["patchIsReadByMasterNotice"];
    trace?: never;
  };
  "/push/read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 알람 내역 읽음 처리
     * @deprecated
     */
    patch: operations["patchReadPush"];
    trace?: never;
  };
  "/notices/read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 공지사항 읽음 처리 */
    patch: operations["patchReadNotice"];
    trace?: never;
  };
  "/formattingStyle": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 시크릿 포맷팅값 변경 */
    patch: operations["patchFormattingStyle"];
    trace?: never;
  };
  "/clubLetter/{masterId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 클렵 편지 읽음 여부 수정 */
    patch: operations["patchClubLetterByReadValue"];
    trace?: never;
  };
  "/picks/{id}/v2": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아이디에 해당하는 Pick 정보를 가져옵니다.
     * @deprecated
     */
    get: operations["getPickScreenByIdV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v4/picks/meta": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 투표와 주식정보를 가져옵니다. + 레드닷 */
    get: operations["getPicksMetaPageV4"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/feed_meta": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 배너와 마스터의 정보를 가져옵니다. + 구독, 새글 + 마스터 순서 정렬 + 레드닷
     * @deprecated
     */
    get: operations["getFeedMetaPageV3"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v4/feed_meta": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 배너와 마스터의 정보를 가져옵니다. + 구독, 새글 + 마스터 순서 정렬 + 레드닷 */
    get: operations["getFeedMetaPageV4"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/clubs/club_meta/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 마스터 정보와 팔로우 수와 권한 정보를 가져옵니다. + 편지글, 레드닷 */
    get: operations["getClubMetaPageV3"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clubs/{id}/master": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 클럽 조회 */
    get: operations["getClubScreenDetailById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/clubs/{id}/notice": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 클럽아이디에 대한 공지사항 전체 조회 + 읽음 여부 */
    get: operations["getClubNoticesV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/clubs/notice/{noticeId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 클럽 공지사항의 아이디 조회 */
    get: operations["getClubNoticeById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/indexes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 주식 정보 목록을 가져옵니다. */
    get: operations["getIndexesScreen"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v4/comments/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 아이디에 해당하는 댓글을 가져옵니다. */
    get: operations["getCommentsByCommentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{commentId}/child-comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 아이디에 해당하는 댓글의 대댓글을 가져옵니다. */
    get: operations["getChildCommentsByParentCommentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 댓글을 작성합니다. */
    post: operations["postCommentV3"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/comments/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 댓글을 수정합니다. */
    patch: operations["updateCommentByCommentIdV3"];
    trace?: never;
  };
  "/v2/comments/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 댓글을 삭제합니다. */
    delete: operations["deleteCommentByCommentIdV2"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{commentId}/reports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 댓글을 신고합니다. */
    post: operations["createReportByCommentId"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/comments/{commentId}/likes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 좋아요를 생성 또는 수정합니다. */
    patch: operations["upsertLikeByCommentId"];
    trace?: never;
  };
  "/comments/{commentId}/masters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 아이디에 해당하는 댓글의 마스터를 가져옵니다. */
    get: operations["getMasterByCommentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저 본인의 정보를 가져옵니다. + 알람 로컬
     * @description 3.0부터 사용
     */
    get: operations["getMeScreenV3"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/me/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 세팅 화면을 가져옵니다. + deviceToken */
    get: operations["getSettingsScreenV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/me/memberships": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 나의 멤버십의 정보를 가져옵니다.
     * @deprecated
     */
    get: operations["getMyMembershipScreenV3"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v4/me/memberships": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 나의 멤버십의 정보를 가져옵니다. */
    get: operations["getMyMembershipScreenV4"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/memberships/{membershipId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 나의 멤버십의 상세정보를 가져옵니다. */
    get: operations["getMyMembershipDetailScreen"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/memberships/{membershipId}/paymentMethodChange": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 나의 멤버십의 결재 수단 변경 정보를 가져옵니다. 헥토 결제에 대해서만 동작 */
    get: operations["getMyMembershipPaymentMethodChange"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/memberships/{membershipId}/cancel": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 나의 멤버십의 구독 해지 정보를 가져옵니다. */
    get: operations["getMyMembershipCancelScreen"];
    put?: never;
    /** 멤버십 구독 해지를 요청합니다. */
    post: operations["postMyMembershipCancel"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/memberships/{membershipId}/renew": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 멤버십 구독 재계를 요청합니다. */
    post: operations["postMyMembershipRenew"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/memberships/{membershipId}/change": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 멤버십 상품 변경이 가능한 리스트를 가져옵니다. */
    get: operations["getMyMembershipChange"];
    put?: never;
    /** 멤버십 상품 변경을 요청합니다. */
    post: operations["postMyMembershipChange"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/me/masters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내가 팔로우한 마스터의 목록을 가져옵니다. + 라운드 정렬 */
    get: operations["getMyMastersScreenV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/profile_edit": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 프로필 수정 화면을 가져옵니다. */
    get: operations["getProfileEditScreen"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/products/assets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 애셋상품을 구매합니다. */
    post: operations["postAssetsProducts"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 애셋으로 컨텐츠를 구매합니다. */
    post: operations["postMyContents"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/me/redDot": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 레드닷을 가져옵니다 */
    get: operations["getRedDot"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/ranks/interest": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 내 관심사 랭킹 다이얼로그 모델을 가져옵니다. */
    get: operations["getInterestRankDialogModel"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/secrets/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 시크릿스크린 조회 + 줄간격, 폰트크기 추가
     * @deprecated
     * @description 시크릿스크린 조회 + 줄간격, 폰트크기 추가 + US-3055(미처리)
     */
    get: operations["getSecretScreenByIdV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v4/series/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 해당하는 아이디의 시리즈를 가져옵니다. + 읽음 여부 + 회차 페이지네이션 */
    get: operations["getSeriesScreenByIdV4"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/helpDesk": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 고객센터 조회 + 알람 로컬 */
    get: operations["getHelpDeskScreenV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/helpDesk/notices/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 해당하는 아이디의 공지사항을 가져옵니다. */
    get: operations["getNoticeScreenById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/assets/android": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAssetProductsAndroid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/assets/ios": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAssetProductsIos"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/memberships/android": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getMembershipProductsAndroid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/products/memberships/ios": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** iOS 심사통과를 위한 데이터를 제공함, 추후 인앱 결제를 정식으로 사용하려면 개선 필요 */
    get: operations["getMembershipProductsIosV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/memberships/hecto": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 헥토 멤버십 상품 리스트 조회 */
    get: operations["getMembershipProductsHecto"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/memberships/hecto/no-auth": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 헥토 멤버십 상품 리스트 조회 + 개인화된 데이터 제외 */
    get: operations["getMembershipProductsHectoNoAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/memberships/hecto/{mchtTrdNo}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 헥토 멤버십 상품 상세 조회, 호출 시점에 결제 방식이 결정되어 있어야 함 */
    get: operations["getMembershipProductDetailHecto"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 로그인 후 필요한 내 정보를 가져옵니다. */
    get: operations["getMyAuthV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 로그인 후 필요한 내 정보를 가져옵니다.
     * @deprecated
     */
    get: operations["getMyAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/auth/devices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 디바이스(FCM) 토큰과 디바이스 모델을 등록합니다. + DeviceId, PermissionStatus 추가 (디버깅용) */
    post: operations["postDeviceV3"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/refreshtokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 토큰 갱신 (refresh token 도 신규 발급 됨)
     * @description refresh token 을 이용해서 refresh token 과 access token 을 재발급합니다.
     */
    post: operations["refreshTokens"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * access token 유효성 확인
     * @description access token 에 대한 유효성을 검증합니다.
     */
    get: operations["validateAccessToken"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/direct/code/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** "핸드폰 번호로 발급받은 인증코드 확인 */
    post: operations["validateAuthCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/direct/code/generate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 핸드폰 번호로 인증 코드 발급합니다.
     * @deprecated
     */
    post: operations["sendAuthCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/direct/code/generate/v2": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 핸드폰 번호로 인증 코드 발급합니다. */
    post: operations["sendAuthCodeV2"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/direct": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * subId와 비밀번호로 로그인
     * @deprecated
     */
    post: operations["directLogin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/auth/direct": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** subId와 비밀번호로 로그인 + 유저 정보 */
    post: operations["directLoginV2"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/phone-numbers/check-duplication": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 전화번호 중복 체크 */
    post: operations["phoneNumberCheckDuplication"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/google": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 소셜로그인 - 구글
     * @description 구글 로그인
     */
    get: operations["googleAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/apple": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 소셜로그인 - 애플
     * @description 애플 로그인
     */
    get: operations["appleAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/naver": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 소셜로그인 - 네이버
     * @description 네이버 로그인
     */
    get: operations["naverAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/naver/native": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 소셜로그인 - 네이버
     * @description 네이버 로그인 (Flutter navtive only)
     */
    post: operations["naverAuthWithNative"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/kakao": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 소셜로그인 - 카카오
     * @description 카카오 로그인
     */
    get: operations["kakaoAuth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/push/subscribe": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 토픽을 구독합니다 + permissionStatue, deviceId 추가 */
    put: operations["subscribedTopicV3"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v3/push/unsubscribe": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** 토픽을 구독 취소합니다 + permissionStatue, deviceId 추가 */
    put: operations["unsubscribedTopicV3"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/membership-waitlists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 곧 멤버십이 오픈되어요. */
    get: operations["getMembershipWaitlist"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getMasters"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters/{masterCmsId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getMasterByMasterCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters/{masterCmsId}/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 마스터의 컨텐츠들을 가져옵니다.
     * @description 마스터의 컨텐츠들을 가져옵니다.
     */
    get: operations["getContentsByMasterId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/masters/{masterCmsId}/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 마스터의 컨텐츠들을 가져옵니다.
     * @description 마스터의 컨텐츠들을 가져옵니다.
     */
    get: operations["getContentsByMasterIdV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters/{masterCmsId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 마스터 컨텐츠의 댓글들을 가져옵니다.
     * @description 마스터 컨텐츠의 댓글들을 가져옵니다.
     */
    get: operations["getCommentsByMasterCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/masters/{masterCmsId}/master-notices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 마스터의 공지사항들을 가져옵니다.
     * @description 마스터의 공지사항들을 가져옵니다.
     */
    get: operations["getMasterNoticesByMasterCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/userJoinCount": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getUserJoinCount"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/perchasedUserCount": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getPerchasedUserCount"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/salesAmount": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getSalesAmount"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/admin/salesAmount": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getSalesAmountV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/purchased/safeAsset": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getPurchasedSafeAsset"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/admin/purchased/economicFreedom": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getPurchasedEconomicFreedom"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/admin/userJoinCount": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AdminController_getUserJoinCountV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 컨텐츠들을 가져옵니다.
     * @description 컨텐츠들을 가져옵니다.
     */
    get: operations["getContents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 컨텐츠들을 가져옵니다.
     * @description 컨텐츠들을 가져옵니다.
     */
    get: operations["getContentsV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/most-viewed": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 이런 콘텐츠는 어떠세요? 컴포넌트에 해당하는 API
     * @description 시작날짜와 종료날짜를 기준으로 조회수가 높은 멤버십 컨텐츠들을 가져옵니다.
     */
    get: operations["getMostViewedContents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/join-recommendation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 참여해보세요 컴포넌트에 해당하는 API
     * @description isShownJoinRecommendation이 true인 커뮤니티 컨텐츠들을 가져옵니다.
     */
    get: operations["getJoinRecommendationContents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/picked": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 커뮤니티 이슈 필터에 해당하는 API
     * @description 함께픽하기의 일정 갯수 이상인 컨텐츠들을 가져옵니다.
     */
    get: operations["getPickedContents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/pick/{cmsId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아이디에 해당하는 커뮤니티 컨텐츠를 가져옵니다.
     * @description 아이디에 해당하는 커뮤니티 컨텐츠를 가져옵니다.
     */
    get: operations["getPickContentByCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/free-recommendation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 오늘만 무료 컴포넌트에 해당하는 API
     * @description isDisplayFreeRecommendation가 true인 멤버십 컨텐츠를 가져옵니다.
     */
    get: operations["getFreeRecommendationContent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/secret/{cmsId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아이디에 해당하는 멤버십 컨텐츠를 가져옵니다.
     * @description 아이디에 해당하는 커뮤니티 컨텐츠들을 가져옵니다. APP 전용
     */
    get: operations["getSecretContentByCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/contents/secret/{cmsId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아이디에 해당하는 멤버십 컨텐츠를 가져옵니다.
     * @description 아이디에 해당하는 커뮤니티 컨텐츠들을 가져옵니다. WEB 전용
     */
    get: operations["getSecretContentByCmsIdV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/{contentCmsId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 컨텐츠의 댓글들을 가져옵니다.
     * @description 컨텐츠의 댓글들을 가져옵니다.
     */
    get: operations["getCommentsByContent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/contents/{contentCmsId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 컨텐츠의 댓글들을 가져옵니다.
     * @description 컨텐츠의 댓글들을 가져옵니다.
     */
    get: operations["getCommentsByContentV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/{contentCmsId}/comments/count": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 컨텐츠의 댓글의 총 갯수를 가져옵니다.
     * @description 컨텐츠의 댓글의 총 갯수를 가져옵니다.
     */
    get: operations["getCommentCountByContent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/series/{seriesCmsId}/secrets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 시리즈의 시크릿 컨텐츠들을 가져옵니다.
     * @description 시리즈의 시크릿 컨텐츠들을 가져옵니다.
     */
    get: operations["getSecretContentsBySeriesCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/series/{seriesCmsId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 아이디에 해당하는 시리즈를 가져옵니다.
     * @description 아이디에 해당하는 시리즈를 가져옵니다.
     */
    get: operations["getSeriesByCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/contents/{contentCmsId}/masters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Cms 아이디에 해당하는 컨텐츠의 마스터를 가져옵니다. */
    get: operations["getMasterByContentCmsId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/follows/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저가 팔로우 한 마스터들의 컨텐츠들을 가져옵니다.
     * @description 유저가 팔로우 한 마스터들의 컨텐츠들을 가져옵니다.
     */
    get: operations["getContentsByFollows"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v2/users/{userId}/follows/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저가 팔로우 한 마스터들의 컨텐츠들을 가져옵니다.
     * @description 유저가 팔로우 한 마스터들의 컨텐츠들을 가져옵니다.
     */
    get: operations["getContentsByFollowsV2"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/my-products": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저의 멤버십을 가져옵니다. - 배너 전용
     * @description 유저의 멤버십을 가져옵니다. - 배너 전용
     */
    get: operations["getMyProductsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/my-products/content-schedules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 멤버십 콘텐츠 일정 컴포넌트에 해당하는 API
     * @description 나의 상품의 마스터의 컨텐츠 일정들을 가져옵니다.
     */
    get: operations["getContentSchedulesByMyProducts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/follows/content-schedules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 멤버십 콘텐츠 일정 컴포넌트에 해당하는 API
     * @description 팔로우 한 마스터들의 컨텐츠 일정들을 가져옵니다.
     */
    get: operations["getContentSchedulesByFollows"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/scraps/contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저가 스크랩 한 컨텐츠들을 가져옵니다.
     * @description 유저가 스크랩 한 컨텐츠들을 가져옵니다.
     */
    get: operations["getScrappedContentsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/comments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저가 작성한 댓글을 가져옵니다.
     * @description 유저가 작성한 댓글을 가져옵니다.
     */
    get: operations["getCommentsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/alarm-history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저의 알림내역을 가져옵니다.
     * @description 유저의 알림내역을 가져옵니다.
     */
    get: operations["getAlarmHistoryByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/alarm-history/read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 유저의 알림내역을 모두 읽음처리합니다.
     * @description 유저의 알림내역을 모두 읽음처리합니다.
     */
    patch: operations["patchAlarmHistoryReadByUserId"];
    trace?: never;
  };
  "/users/{userId}/alarm-history/{alarmHistoryId}/read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 유저의 알림내역을 읽음처리합니다.
     * @description 유저의 알림내역을 읽음처리합니다.
     */
    patch: operations["patchAlarmHistoryIsReadByAlarmHistoryId"];
    trace?: never;
  };
  "/users/{userId}/my-assets": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저의 에셋정보를 가져옵니다.
     * @description 유저의 에셋정보를 가져옵니다.
     */
    get: operations["getMyAssetsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/my-assets/balance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저의 에셋의 타입에 따른 총 양을 가져옵니다.
     * @description 유저의 에셋의 타입에 따른 총 양를 가져옵니다.
     */
    get: operations["getMyAssetsBalanceByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/purchased-contents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저가 구매한 컨텐츠 목록을 가져옵니다.
     * @description 유저가 구매한 컨텐츠 목록을 가져옵니다.
     */
    get: operations["getPurchasedContentsByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{userId}/follows/masters": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 유저가 팔로우 한 마스터들을 가져옵니다.
     * @description 유저가 팔로우 한 마스터들을 가져옵니다.
     */
    get: operations["getFollowedMasterByUserId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content-schedules/target-date": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 멤버십 콘텐츠 일정 컴포넌트에 해당하는 API
     * @description 컨텐츠 일정들을 가져옵니다. 현재 시간 바로 이전, 바로 이후 컨텐츠를 하나씩 가져옵니다.
     */
    get: operations["getContentSchedulesTargetDate"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/content-schedules": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 멤버십 콘텐츠 일정 컴포넌트에 해당하는 API
     * @description 컨텐츠 일정들을 가져옵니다.
     */
    get: operations["getContentSchedules"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/notices": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 공지사항 조회합니다.
     * @description 공지사항을 조회합니다.
     */
    get: operations["getNotices"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/signUp/web": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 웹 회원가입 */
    post: operations["signUpByWeb"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/signUp/app": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 앱 회원가입 + 디바이스 토큰, 아이디, 권한 저장 */
    post: operations["signUpByApp"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/device": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 디바이스(FCM) 토큰과 디바이스 모델을 등록합니다. + DeviceId, PermissionStatus 추가 (디버깅용) */
    post: operations["registerDevice"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/token/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 토큰 갱신 (refresh token 도 신규 발급 됨)
     * @description refresh token 을 이용해서 refresh token 과 access token 을 재발급합니다.
     */
    post: operations["refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/login/direct": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** direct 로그인 */
    post: operations["directToLogin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * token 유효성 확인
     * @description token 에 대한 유효성을 검증합니다.
     */
    get: operations["validateToken"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/marketingAgree": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** 마케팅 수신 동의 변경 */
    patch: operations["updateMarketingAgree"];
    trace?: never;
  };
  "/v1/auth/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 로그인 후 필요한 내 정보를 가져옵니다. */
    get: operations["getMyInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/withdraw": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 회원탈퇴 */
    delete: operations["withdraw"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/signOut/V2": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** 회원탈퇴 */
    delete: operations["signOutV2"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/direct/code/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** "핸드폰 번호로 발급받은 인증코드 확인 */
    post: operations["checkAuthCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/direct/code/generate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 핸드폰 번호로 인증 코드 발급합니다. */
    post: operations["generateAuthCode"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/direct/password/check": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 비밀번호 동일한 지 확인 */
    get: operations["validatePassword"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/direct/password/reset": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 비밀번호 재설정 */
    post: operations["updatePassword"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/auth/direct/phone-number/check-duplication": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** 전화번호 중복 체크 */
    post: operations["checkDuplicatePhoneNumber"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/faqs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * FAQ들을 가져옵니다.
     * @description FAQ들을 가져옵니다.
     */
    get: operations["getFaqs"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * @default <string>
     * @enum {string}
     */
    PickCountType: "sympathy" | "suggestion" | "expectancy";
    /**
     * @description 컨텐츠 타입
     * @default <string>
     * @enum {string}
     */
    ContentTypeDto:
      | "none"
      | "pick"
      | "series"
      | "secret"
      | "live"
      | "poll"
      | "all";
    MyPickV2Dto: {
      /**
       * @description Pick Id
       * @default <string>
       */
      pickId: string;
      /**
       * @description Pick 여부
       * @default <boolean>
       */
      isPicked: boolean;
      selectedPickType?: components["schemas"]["PickCountType"];
      contentType: components["schemas"]["ContentTypeDto"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ScrapTypeDto: "pick" | "series" | "secret" | "live" | "all";
    ScrapDto: {
      /**
       * @description Scrap Contents Id
       * @default <string>
       */
      content: string;
      contentType: components["schemas"]["ScrapTypeDto"];
      /**
       * @description Scrap 여부
       * @default <boolean>
       */
      isScraped: boolean;
    };
    FollowDto: {
      /**
       * @description Follow Master Id
       * @default <string>
       */
      followed: string;
      /**
       * @description Follow 여부
       * @default <boolean>
       */
      isFollowed: boolean;
    };
    UpdateFollow: {
      /**
       * @description 클럽아이디
       * @default <string>
       */
      masterId: string;
      /**
       * @description 정렬 순서
       * @default <integer>
       */
      round: number;
    };
    UpdateFollowBodyRequestDto: {
      follow: components["schemas"]["UpdateFollow"][];
    };
    UpdateFollowResponseDto: {
      /**
       * @description Follow Master Id
       * @default <string>
       */
      followed: string;
      /**
       * @description Follow 여부
       * @default <boolean>
       */
      isFollowed: boolean;
      /**
       * @description 정렬 순서
       * @default <integer>
       */
      round: number;
    };
    UpdateFollowResponseDtoV2: {
      /** @description 정렬 순서 */
      follows: components["schemas"]["UpdateFollowResponseDto"][];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    LoginTypeDto: "direct" | "apple" | "google" | "naver" | "kakao";
    ProfileEditScreenState: {
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
       */
      portraitUrl: string;
      /**
       * @default <string>
       * @example 행복한 투자자
       */
      nickName: string;
      /**
       * @default <string>
       * @example 01033334444
       */
      phoneNumber: string;
      /**
       * Format: email
       * @description 없으면 빈 문자열
       * @default <email>
       */
      email: string;
      LoginTypeDto: components["schemas"]["LoginTypeDto"];
      /**
       * @description 휴대폰 등록 여부
       * @default <boolean>
       */
      addPhoneNumber: boolean;
    };
    PatchIsFinishedTUTRequestDto: {
      /**
       * @description 변경 후 isFinishedTUT의 값
       * @default <boolean>
       */
      isFinishedTUT: boolean;
    };
    PatchIsFinishedTUTResponseDto: {
      /**
       * @description 변경 후 isFinishedTUT의 값
       * @default <boolean>
       */
      isFinishedTUT: boolean;
    };
    PatchIsReadByMasterNoticeDto: {
      /**
       * @description 마스터공지사항 아이디
       * @default <string>
       */
      masterNoticeId: string;
      /**
       * @description 마스터공지사항 읽음 여부
       * @default <boolean>
       */
      didRead: boolean;
    };
    PatchIsReadByMasterNoticeResponseDto: {
      /** @description 변경 후 isFinishedTUT의 값 */
      masterNoticeHistory: components["schemas"]["PatchIsReadByMasterNoticeDto"][];
    };
    PatchAlarmReadRequestBodyDto: {
      /** @description 알림 오브젝트 아이디를 배열로 */
      historyId: string[];
    };
    AlarmHistoryDto: {
      /**
       * @description 알림 오브젝트 아이디
       * @default <string>
       */
      historyId: string;
      /**
       * @description 읽음여부
       * @default <boolean>
       */
      didRead: boolean;
    };
    PatchAlarmReadResponseDto: {
      /** @description 알람내역 */
      alarmHistory: components["schemas"]["AlarmHistoryDto"][];
    };
    PatchNoticeReadRequestBodyDto: {
      /** @description 공지사항 아이디를 배열로 */
      noticeId: string[];
    };
    NoticeHistoryDto: {
      /**
       * @description 공지사항 cms 아이디
       * @default <string>
       */
      noticeId: string;
      /**
       * @description 읽음여부
       * @default <boolean>
       */
      didRead: boolean;
    };
    PatchNoticeReadResponseDto: {
      /** @description 알람내역 */
      noticeHistory: components["schemas"]["NoticeHistoryDto"][];
    };
    PatchFormattingStyleRequestDtoData: {
      /**
       * Format: double
       * @default <double>
       */
      fontSize: number;
      /**
       * Format: double
       * @default <double>
       */
      lineHeight: number;
    };
    PatchFormattingStyleResponseDtoData: {
      /**
       * Format: double
       * @default <double>
       */
      fontSize: number;
      /**
       * Format: double
       * @default <double>
       */
      lineHeight: number;
    };
    PatchClubLetterByReadValue: {
      /** @default <string> */
      masterId: string;
      /** @default <boolean> */
      didRead: boolean;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      updatedAt: string;
    };
    PatchClubLetterByReadValueResponseDto: {
      clubLetterHistory: components["schemas"]["PatchClubLetterByReadValue"][];
    };
    /**
     * @description domesticIndex 국내 지수, overseasIndex 해외 지수, domesticCommodityIndex 국내 원자재 지수, overseasCommodityIndex 해외 원자재 지수, exchangeRate 환율 지수, domesticStock 국내 주식, overseasStock 해외 주식
     * @default <string>
     * @enum {string}
     */
    FinanceTypeDto:
      | "none"
      | "domesticIndex"
      | "overseasIndex"
      | "domesticCommodityIndex"
      | "overseasCommodityIndex"
      | "exchangeRate"
      | "domesticStock"
      | "overseasStock";
    FinanceCardModel: {
      /**
       * @description Stock ID
       * @default <string>
       * @example 005930
       */
      id: string;
      /**
       * @default <string>
       * @example 삼성전자
       */
      name: string;
      /**
       * Format: double
       * @description 지수(2,256,28)
       * @default <double>
       */
      index: number;
      /**
       * Format: double
       * @description 변동률(%)
       * @default <double>
       */
      changeRate: number;
      type: components["schemas"]["FinanceTypeDto"];
      /**
       * @description 장마감 여부
       * @default <boolean>
       * @example true
       */
      isOpen: boolean;
      /**
       * @description 국내 해외 지수 구분자
       * @default <string>
       * @example ko
       */
      country: string;
      /**
       * @description true면 반영중, false면 반영 완료
       * @default <boolean>
       * @example true
       */
      pending: boolean;
    };
    PDFData: {
      /**
       * Format: url
       * @description pdfUrl
       * @default <url>
       */
      pdfUrl: string;
      /** @default <string> */
      fileName: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    PickTypeDto: "none" | "link" | "image";
    PickScreenV2Dto: {
      pickCounts: components["schemas"]["PickCountDto"][];
      selectedPickType?: components["schemas"]["PickCountType"];
      /**
       * @default <boolean>
       * @example true
       */
      isUserPicked: boolean;
      /**
       * @description 픽이 스크랩 되었는지 여부
       * @default <boolean>
       * @example true
       */
      isScraped: boolean;
      /**
       * @description 권한 여부
       * @default <boolean>
       */
      hasAuthority: boolean;
      type: components["schemas"]["PickTypeDto"];
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
       */
      masterPortraitUrl: string;
      /**
       * @default <string>
       * @example 미주부
       */
      masterName: string;
      /**
       * Format: date-time
       * @default <dateTime>
       * @example 2023-03-31T08:43:15.420Z
       */
      createdAt: string;
      /**
       * @default <string>
       * @example 미래 나노텍, 리튬 가격 50% 인상 전망에 주가 급등
       */
      title: string;
      /**
       * Format: url
       * @description 픽의 상세 페이지 URL desc와 같은 내용을 담고 있다.
       * @default <url>
       * @example https://master.d3p3hqflqwi88c.amplifyapp.com/content?id=6&content_type=picks
       */
      contentUrl: string;
      outboundLink?: components["schemas"]["OutboundLinkCardDto"][] | null;
      stocks: components["schemas"]["FinanceCardModel"][];
      /**
       * Format: url
       * @default <url>
       */
      imageUrl: string;
      /**
       * Format: url
       * @default <url>
       */
      html: string;
      pdfUrl?: components["schemas"]["PDFData"][] | null;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconURL: string;
      /**
       * @default <string>
       * @example 미주부
       */
      masterCmsId: string;
      /**
       * @default <string>
       * @example 미주부
       */
      masterDetailKeyCareer: string;
      /**
       * Format: url
       * @default <url>
       */
      webImageUrl: string;
    };
    PollCardModel: {
      /**
       * @default <string>
       * @example 진격의 테슬라는 계속 상승할 것으로 보시나요? 어스인의 생각을 들려주세요.
       */
      title: string;
      /**
       * @default <integer>
       * @example 388
       */
      joinCount: number;
    };
    PickCardTaggedStock: {
      /** @example 005930 */
      id: string;
      /** @example 삼성전자 */
      name: string;
    };
    PickCountDto: {
      /** @default <integer> */
      count: number;
      type: components["schemas"]["PickCountType"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ContentCardTypeDto: "content" | "pick" | "secret" | "series" | "live";
    /** @enum {string} */
    PickSourceTypeDto: "none" | "issued" | "followed";
    OutboundLinkCardDto: {
      /**
       * @default <string>
       * @example 미 기준금리 '3월 동결론'등장...파월 진화 나설까
       */
      title: string;
      /**
       * @default <string>
       * @example 조선일보
       */
      sourceName: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/MetatagImg.png
       */
      imageUrl: string;
      /**
       * Format: url
       * @default <url>
       * @example https://www.example.com
       */
      originUrl: string;
    };
    PickCardV2Dto: {
      /**
       * @description 콘텐츠 id
       * @example 1
       */
      id: string;
      type: components["schemas"]["ContentCardTypeDto"];
      /**
       * Format: date-time
       * @example 2023-03-31T08:43:15.420Z
       */
      createdAt: string;
      /** @example 김영익 */
      creatorName: string;
      /**
       * Format: url
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
       */
      creatorPortraitUrl: string;
      /** @description 콘텐츠를 생성한 클럽 id. 서버에서는 master id */
      creatorClubId: string;
      /** @example 미 기준금리 '3월 동결론'등장...파월 진화 나설까 */
      title: string;
      /** @example 미 연준이 기준 금리를 동결하게 되면 경제에는 어떤 영향이 있을까요? 과연 좋은 소식들이 들릴까요? 이는 너무나 짧은 여기서부터 짤립니다. */
      detail: string;
      /**
       * @description 유저 스크랩 여부, club?type=series에서 사용 안 되기에 고정값, 그 외는 사용
       * @example true
       */
      isScraped: boolean;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconURL?: string | null;
      pickType: components["schemas"]["PickTypeDto"];
      pickSourceType?: components["schemas"]["PickSourceTypeDto"];
      /**
       * Format: url
       * @description PickTypeDto이 image 일 경우 값이 있음, 나머지 undefined
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/pick_img.png
       */
      imageUrl?: string | null;
      outboundLink?: components["schemas"]["OutboundLinkCardDto"] | null;
      pickedCounts: components["schemas"]["PickCountDto"][];
      /** @description 해당 종목을 누르면 stock/:id로 라우팅 */
      taggedStocks: components["schemas"]["PickCardTaggedStock"][];
    };
    PicksMetaPageV4Dto: {
      poll: components["schemas"]["PollCardModel"];
      stocks: components["schemas"]["FinanceCardModel"][];
      /** @default <boolean> */
      hasNew: boolean;
    };
    FeedBannerModel: {
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/master_slideImg_EX.png
       */
      imageUrl: string;
      /**
       * Format: url
       * @default <url>
       * @example https://www.example.com
       */
      linkUrl: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    MembershipTypeDto: "membership" | "none" | "unsubscribed" | "premium";
    MasterCardModelV2: {
      /**
       * @description 마스터 key
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * @default <string>
       * @example 김영익
       */
      name: string;
      /**
       * Format: url
       * @description uri
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/MyMaster01.png
       */
      profileImage: string;
      /**
       * Format: url
       * @description 클럽 커버 이미지 url
       * @default <url>
       * @example www.example.com
       */
      clubOfficialImage: string;
      /**
       * Format: url
       * @description 클럽 텍스트 이미지 url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/MyMaster01.png
       */
      clubTextImage: string;
      type: components["schemas"]["MembershipTypeDto"];
      /**
       * @description 마스터 정렬 순서
       * @default <integer>
       */
      round: number;
      /**
       * @description 마스터 그린닷 여부
       * @default <boolean>
       */
      hasNew: boolean;
      /**
       * @description 구독여부
       * @default <boolean>
       * @example true
       */
      isSubscribed: boolean;
    };
    FeedMetaPageDtoV2: {
      masters: components["schemas"]["MasterCardModelV2"][];
      banners: components["schemas"]["FeedBannerModel"][];
      /** @default <boolean> */
      hasNew: boolean;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ClubScreenTypeDto: "pick" | "series" | "live" | "secret" | "all";
    /**
     * @default <string>
     * @enum {string}
     */
    MembershipIntroductionType:
      | "masterNotice"
      | "externalWebLink"
      | "InternalContent";
    MembershipIntroductionDto: {
      type: components["schemas"]["MembershipIntroductionType"];
      /** @default <string> */
      value: string;
    };
    ContentCardDto: {
      /**
       * @description 콘텐츠 id
       * @example 1
       */
      id: string;
      type: components["schemas"]["ContentCardTypeDto"];
      /**
       * Format: date-time
       * @example 2023-03-31T08:43:15.420Z
       */
      createdAt: string;
      /** @example 김영익 */
      creatorName: string;
      /**
       * Format: url
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
       */
      creatorPortraitUrl: string;
      /** @description 콘텐츠를 생성한 클럽 id. 서버에서는 master id */
      creatorClubId: string;
      /** @example 미 기준금리 '3월 동결론'등장...파월 진화 나설까 */
      title: string;
      /** @example 미 연준이 기준 금리를 동결하게 되면 경제에는 어떤 영향이 있을까요? 과연 좋은 소식들이 들릴까요? 이는 너무나 짧은 여기서부터 짤립니다. */
      detail: string;
      /**
       * @description 유저 스크랩 여부, club?type=series에서 사용 안 되기에 고정값, 그 외는 사용
       * @example true
       */
      isScraped: boolean;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconURL?: string | null;
    };
    SecretCardDto: {
      /**
       * @description 콘텐츠 id
       * @example 1
       */
      id: string;
      type: components["schemas"]["ContentCardTypeDto"];
      /**
       * Format: date-time
       * @example 2023-03-31T08:43:15.420Z
       */
      createdAt: string;
      /** @example 김영익 */
      creatorName: string;
      /**
       * Format: url
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
       */
      creatorPortraitUrl: string;
      /** @description 콘텐츠를 생성한 클럽 id. 서버에서는 master id */
      creatorClubId: string;
      /** @example 미 기준금리 '3월 동결론'등장...파월 진화 나설까 */
      title: string;
      /** @example 미 연준이 기준 금리를 동결하게 되면 경제에는 어떤 영향이 있을까요? 과연 좋은 소식들이 들릴까요? 이는 너무나 짧은 여기서부터 짤립니다. */
      detail: string;
      /**
       * @description 유저 스크랩 여부, club?type=series에서 사용 안 되기에 고정값, 그 외는 사용
       * @example true
       */
      isScraped: boolean;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconURL?: string | null;
      /** @description 소속 된 시리즈 안에서 자신의 에피소드 번호 */
      episodeNumber: number;
      /** @description 회차 명 */
      episodeTitle: string;
      /**
       * Format: url
       * @description 소속 된 시리즈 썸네일
       */
      coverImageUrl: string;
      /** @description 소속 된 시리즈의 평가 수 */
      rateCount: number;
      /** @description 소속 된 시리즈 id */
      seriesId: string;
      /** @description 소속 된 시리즈 스크랩 여부 */
      isSeriesScraped: boolean;
    };
    SeriesCardDto: {
      /**
       * @description 콘텐츠 id
       * @default <string>
       * @example 1
       */
      id: string;
      type: components["schemas"]["ContentCardTypeDto"];
      /**
       * Format: date-time
       * @default <dateTime>
       * @example 2023-03-31T08:43:15.420Z
       */
      createdAt: string;
      /**
       * @default <string>
       * @example 김영익
       */
      creatorName: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
       */
      creatorPortraitUrl: string;
      /**
       * @description 콘텐츠를 생성한 클럽 id. 서버에서는 master id
       * @default <string>
       */
      creatorClubId: string;
      /**
       * @default <string>
       * @example 미 기준금리 '3월 동결론'등장...파월 진화 나설까
       */
      title: string;
      /**
       * @default <string>
       * @example 미 연준이 기준 금리를 동결하게 되면 경제에는 어떤 영향이 있을까요? 과연 좋은 소식들이 들릴까요? 이는 너무나 짧은 여기서부터 짤립니다.
       */
      detail: string;
      /**
       * @description 유저 스크랩 여부, club?type=series에서 사용 안 되기에 고정값, 그 외는 사용
       * @default <boolean>
       * @example true
       */
      isScraped: boolean;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconURL: string;
      /**
       * @description 시리즈 전체 에피소드 수
       * @default <integer>
       */
      totalEpisodeCount: number;
      /**
       * Format: uri
       * @description 시리즈 썸네일
       * @default <uri>
       */
      coverImageUrl: string;
      /**
       * @description rate * 10으로 포현
       * @default <integer>
       */
      rateCount: number;
    };
    /** @enum {string} */
    LiveTypeDto: "none" | "article" | "video" | "audio";
    LiveCardDto: {
      /**
       * @description 콘텐츠 id
       * @example 1
       */
      id: string;
      type: components["schemas"]["ContentCardTypeDto"];
      /**
       * Format: date-time
       * @example 2023-03-31T08:43:15.420Z
       */
      createdAt: string;
      /** @example 김영익 */
      creatorName: string;
      /**
       * Format: url
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
       */
      creatorPortraitUrl: string;
      /** @description 콘텐츠를 생성한 클럽 id. 서버에서는 master id */
      creatorClubId: string;
      /** @example 미 기준금리 '3월 동결론'등장...파월 진화 나설까 */
      title: string;
      /** @example 미 연준이 기준 금리를 동결하게 되면 경제에는 어떤 영향이 있을까요? 과연 좋은 소식들이 들릴까요? 이는 너무나 짧은 여기서부터 짤립니다. */
      detail: string;
      /**
       * @description 유저 스크랩 여부, club?type=series에서 사용 안 되기에 고정값, 그 외는 사용
       * @example true
       */
      isScraped: boolean;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconURL?: string | null;
      liveType: components["schemas"]["LiveTypeDto"];
      /**
       * Format: uri
       * @description article Type의 경우 null or ''
       * @example https://www.example.com
       */
      source: string;
      /**
       * @description 프리미엄 membership 권한자의 수
       * @example 6734
       */
      userCount: number;
      /**
       * @description 최근 가입한 회원의 프로필사진
       * @example [
       *       "https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator01.png",
       *       "https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator02.png",
       *       "https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator03.png"
       *     ]
       */
      latestUsers: string[];
    };
    /**
     * @default open
     * @enum {string}
     */
    AccessStateDto: "open" | "close";
    MasterAccessStateDto: {
      club: components["schemas"]["AccessStateDto"];
      membership: components["schemas"]["AccessStateDto"];
    };
    /**
     * @description 안 쓰이는 값
     * @default <string>
     * @enum {string}
     */
    UserTierTypeDto: "none" | "follow" | "membership";
    ClubMetaPageV3ResponseDto: {
      /**
       * @default <string>
       * @example 김영익
       */
      name: string;
      /**
       * @default <integer>
       * @example 1357
       */
      followers: number;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/ClubPageProfile.png
       */
      clubOfficialImage: string;
      /**
       * Format: url
       * @default <url>
       */
      clubTextImage: string;
      /** @default <string> */
      clubLetter: string;
      userTierType: components["schemas"]["UserTierTypeDto"];
      accessState: components["schemas"]["MasterAccessStateDto"];
      /** @default <integer> */
      secretCount: number;
      /** @default <integer> */
      seriesCount: number;
      /** @default <boolean> */
      didReadLetter: boolean;
      /** @default <boolean> */
      hasNew: boolean;
      membershipIntroduction?: components["schemas"]["MembershipIntroductionDto"];
    };
    CareerData: {
      /**
       * @description id
       * @default <string>
       */
      id: string;
      /**
       * @description 커리어명
       * @default <string>
       */
      careers: string;
      /**
       * @description 순서
       * @default <integer>
       */
      round: number;
    };
    MasterDetail: {
      /**
       * @description 마스터 성함
       * @default <string>
       */
      name: string;
      /**
       * @description 마스터 디테일 소개
       * @default <string>
       */
      masterDetailIntroduction: string;
      /**
       * @description 마스터 디테일 제목
       * @default <string>
       */
      masterDetailKeyCareer: string;
      /**
       * @description 마스터 디테일, 추천 인사말
       * @default <string>
       */
      description: string;
      /**
       * @description 마스터 기부 금액
       * @default <string>
       */
      cumulativeDonation: string;
      /** @description 마스터 이력 */
      masterDetailCareers: components["schemas"]["CareerData"][];
    };
    getClubNoticesV2Dto: {
      /**
       * @description 클럽공지사항 아이디
       * @default <string>
       */
      id: string;
      /**
       * @description 클럽 공지사항 제목
       * @default <string>
       */
      title: string;
      /**
       * Format: date-time
       * @description 작성 날짜 및 시간
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * @description 작성자
       * @default <string>
       */
      creator: string;
      /**
       * @description 읽음 여부
       * @default <boolean>
       */
      didRead: boolean;
    };
    getClubNoticesV2ResponseDto: {
      /** @description 클럽 공지사항 리스트 */
      notices: components["schemas"]["getClubNoticesV2Dto"][];
    };
    MasterNoticeDetail: {
      /**
       * @description 클럽공지사항 아이디
       * @default <string>
       */
      id: string;
      /**
       * @description 클럽 공지사항 제목
       * @default <string>
       */
      title: string;
      /**
       * @description 클럽 공지사항 설명
       * @default <string>
       */
      description: string;
      /**
       * Format: date-time
       * @description 작성 날짜 및 시간
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * @description 작성자
       * @default <string>
       */
      creator: string;
    };
    IndexListTileModel: {
      /**
       * @description key
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * @default <string>
       * @example 코스피
       */
      name: string;
      /**
       * @description 장 마감 여부
       * @default <boolean>
       * @example true
       */
      isOpened: boolean;
      /**
       * Format: date-time
       * @description Format - MM.dd HH:mm
       * @default <dateTime>
       * @example 2023-03-31T08:43:15.420Z
       */
      updatedAt: string;
      /**
       * Format: double
       * @description 지수
       * @default <double>
       */
      index: number;
      /**
       * Format: double
       * @description 지수 변화
       * @default <double>
       */
      changeValue: number;
      /**
       * Format: double
       * @description 변동률
       * @default <double>
       */
      changeRate: number;
      type: components["schemas"]["FinanceTypeDto"];
      /**
       * @description USD, KRW등 통화 ISO-4217
       * @default <string>
       * @example KRW
       */
      currency: string;
      /**
       * @description true면 반영중, false면 반영 완료
       * @default <boolean>
       * @example true
       */
      pending: boolean;
    };
    IndexesScreenState: {
      indexes: components["schemas"]["IndexListTileModel"][];
    };
    /**
     * @default USER
     * @enum {string}
     */
    USER_ROLE:
      | "USER"
      | "ADMIN"
      | "MASTER"
      | "MONITOR"
      | "MASTER_ADMIN"
      | "MASTER_MONITOR";
    UserPaymentInfos: {
      /** @default <string> */
      masterCmsId: string;
      /** @default <integer> */
      hectoCount: number;
      /** @default <integer> */
      usCampusCount: number;
      /** @default <integer> */
      oneTimeCount: number;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    COMMENT_CONTENT_TYPE: "pick" | "secret" | "live" | "poll" | "unknown";
    ContentCommentData: {
      /** @default <string> */
      commentId: string;
      /** @default <string> */
      parentCommentId: string;
      /** @default <string> */
      userId: string;
      /** @default <string> */
      userNickName: string;
      /**
       * Format: url
       * @default <url>
       */
      userPortraitUrl: string;
      userRole: components["schemas"]["USER_ROLE"];
      userPaymentInfos: components["schemas"]["UserPaymentInfos"];
      /** @default <string> */
      comment: string;
      /** @default <integer> */
      likeCount: number;
      /** @default <integer> */
      childCommentCount: number;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /** @default <string> */
      contentCmsId: string;
      contentCmsType: components["schemas"]["COMMENT_CONTENT_TYPE"];
      /** @default <boolean> */
      isMeLike: boolean;
      /**
       * @description 마스터가 좋아요를 눌렀는지 여부
       * @default <boolean>
       */
      isMasterLike: boolean;
      /**
       * @description 마스터가 답글을 달았는지 여부
       * @default <boolean>
       */
      isMasterComment: boolean;
      /** @default <string> */
      masterName: string;
      /**
       * Format: url
       * @default <url>
       */
      masterPortraitUrl: string;
      /**
       * @description 댓글을 작성한 유저의 role이 마스터이고 컨텐츠의 마스터 아이디와 유저의 마스터 아이디가 일치하는 지 여부
       * @default <boolean>
       */
      isRepliedMasterComment: boolean;
      /** @default <string> */
      secretTitle: string;
      /** @default <integer> */
      secretRound: number;
      /**
       * @description 해당 댓글에 내가 답글을 달았는지 여부
       * @default <boolean>
       */
      isMeComment: boolean;
      /**
       * @description 댓글 작성자
       * @default <string>
       */
      author: string;
      /**
       * @description 댓글 마크
       * @default <string>
       */
      mark: string;
      /**
       * @description 댓글 프로필 이미지
       * @default <string>
       */
      profileImage: string;
      /**
       * @description 댓글 멤버십 구독 정보
       * @default <string>
       */
      memberSipSubscription: string;
    };
    CommentResponse: {
      comment: components["schemas"]["ContentCommentData"];
    };
    ChildCommentsResponse: {
      comments: components["schemas"]["ContentCommentData"][];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    CMS_TYPE: "pick" | "secret" | "series";
    CommentCreateRequest: {
      /** @default <string> */
      contentCmsId: string;
      contentType: components["schemas"]["CMS_TYPE"];
      /** @default <string> */
      value: string;
      /** @default <string> */
      parentCommentId: string;
    };
    CommentIdData: {
      /** @default <string> */
      commentId: string;
      /** @default <string> */
      parentCommentId: string;
      /** @default <string> */
      userId: string;
      /** @default <string> */
      masterId: string;
      /** @default <string> */
      contentId: string;
      /** @default <string> */
      contentCmsId: string;
      contentType: components["schemas"]["CMS_TYPE"];
    };
    CommentCreateResponse: {
      comment: components["schemas"]["CommentIdData"];
    };
    CommentUpdateRequest: {
      /** @default <string> */
      value: string;
    };
    CommentUpdateResponse: {
      comment: components["schemas"]["CommentIdData"];
    };
    LikeUpsertRequest: {
      /** @default <boolean> */
      isLike: boolean;
    };
    CommentUpsertResponse: {
      comment: components["schemas"]["CommentIdData"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    MASTER_STATUS: "ACTIVE" | "INACTIVE" | "PENDING";
    MasterOpenStatus: {
      clubStatus: components["schemas"]["MASTER_STATUS"];
      membershipStatus: components["schemas"]["MASTER_STATUS"];
    };
    MembershipIntroduction: {
      /** @default <string> */
      type: string;
      /** @default <string> */
      value: string;
    };
    Master: {
      /** @default <string> */
      cmsId: string;
      /** @default <string> */
      name: string;
      /** @default <string> */
      description: string;
      /** @default <string> */
      masterDetailIntroduction: string;
      /** @default <string> */
      masterDetailKeyCareer: string;
      /** @default <integer> */
      cumulativeDonation: number;
      /** @default <string> */
      clubLetter: string;
      /** @default <string> */
      companyFullName: string;
      /** @default <string> */
      companyShortName: string;
      /**
       * Format: url
       * @default <url>
       */
      companyIcon: string;
      /**
       * Format: url
       * @default <url>
       */
      profileImage: string;
      /**
       * Format: url
       * @default <url>
       */
      clubOfficialImage: string;
      /**
       * Format: url
       * @default <url>
       */
      recommendTextImage: string;
      /**
       * Format: url
       * @default <url>
       */
      recommendImage: string;
      /**
       * Format: url
       * @default <url>
       */
      clubTextImage: string;
      masterDetailCareers: components["schemas"]["MasterDetailCareer"][];
      /**
       * Format: url
       * @default <url>
       */
      productPageImage: string;
      masterStatus: components["schemas"]["MasterOpenStatus"];
      membershipIntroduction?:
        | components["schemas"]["MembershipIntroduction"]
        | null;
      /** @default <integer> */
      recommendRound: number;
      /** @default <boolean> */
      isCommentBlock: boolean;
    };
    MasterResponse: {
      master: components["schemas"]["Master"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    UserLevelTypeDto:
      | "beginner"
      | "explorer"
      | "investor"
      | "analyst"
      | "finple";
    /**
     * @default <string>
     * @enum {string}
     */
    InterestType:
      | "secondaryBattery"
      | "realty"
      | "investment"
      | "domesticStock"
      | "economicTheory"
      | "foreignStock"
      | "cryptoCurrency"
      | "companyAnalysis"
      | "macroEconomics"
      | "personalFinance"
      | "safeAsset"
      | "none";
    MePageState: {
      /**
       * @default <string>
       * @example 행복한 투자자
       */
      name: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator01.png
       */
      portraitUrl: string;
      usGauge: components["schemas"]["UserLevelTypeDto"];
      /**
       * @default <integer>
       * @example 7
       */
      followingCount: number;
      /**
       * @default <integer>
       * @example 7
       */
      assetCount: number;
      /**
       * @description 읽은 컨텐츠 갯수
       * @default <integer>
       * @example 51
       */
      readContentCount: number;
      /** @description UsGaugeType 달성 기준에 대한 checkPoints - [achievement] 가 100 일 때 [checkPoints] 는 최소 값과 최대 값을 뺀 [25, 50, 75] 가 된다. */
      checkPoints: number[];
      /**
       * Format: double
       * @description UsGaugeType 에 유저 따른 달성률
       * @default <double>
       */
      achievementRate: number;
      interestType: components["schemas"]["InterestType"];
      /**
       * @description 가입한 맴버십 갯수
       * @default <integer>
       * @example 13
       */
      membershipCount: number;
      /**
       * @description 스크랩 갯수
       * @default <integer>
       */
      scrapCount: number;
      /**
       * @description 댓글 갯수
       * @default <integer>
       */
      commentCount: number;
      /**
       * @description 유저가 구매한 갯수
       * @default <integer>
       */
      purchasedContentCount: number;
      /**
       * @description 유저가 놓친 고객센터 갯수, 프론트에서 처리하기에 항상 0 고정
       * @default <integer>
       */
      unreadHelpdeskCount: number;
      /**
       * @description 유저가 놓친 공지사항 갯수, 프론트에서 처리하기에 항상 0 고정
       * @default <integer>
       */
      unreadNotificationCount: number;
    };
    SettingsScreenState: {
      loginType: components["schemas"]["LoginTypeDto"];
      /**
       * @description email or phoneNumber
       * @default <string>
       * @example email
       */
      userId: string;
      /** @default false */
      didEventNotificationAgree: boolean;
      /** @default false */
      didMasterNotificationAgree: boolean;
    };
    /**
     * @description 멤버십 상태
     * @default <string>
     * @enum {string}
     */
    MembershipStatusDto: "active" | "inactive";
    /**
     * @description 거래 상태
     * @default <string>
     * @enum {string}
     */
    TransactionStatus:
      | "purchased_success"
      | "purchased_fail"
      | "subscription_cancelled"
      | "subscription_cancel_withdraw"
      | "subscription_changed";
    /**
     * @description 결제 수단 제공자
     * @default <string>
     * @enum {string}
     */
    MyMembershipPaymentProviderDto:
      | "google"
      | "apple"
      | "hecto"
      | "us-campus"
      | "us-insight";
    /**
     * @description 결제수단형식
     * @default <string>
     * @enum {string}
     */
    PaymentMethodType: "subscription" | "onetimepurchase";
    MyMembershipCardModel: {
      /**
       * @description My Membership ID
       * @default <string>
       */
      id: string;
      stsuts: components["schemas"]["MembershipStatusDto"];
      paymentStatus: components["schemas"]["TransactionStatus"];
      /**
       * @description 상품 Id
       * @default <string>
       */
      productId: string;
      /**
       * @description 상품 이름
       * @default <string>
       * @example 김영익 offcial club 경제 나무반
       */
      productName: string;
      /**
       * @description 결제 수단
       * @default <string>
       * @example 신용카드
       */
      paymentMethod: string;
      paymentMethodProvider: components["schemas"]["MyMembershipPaymentProviderDto"];
      /**
       * @description 결제 수단 정보
       * @default <string>
       * @example 8762********1906
       */
      paymentMethodInfo: string;
      /**
       * @description 만료일 (YYYYMMDD)
       * @default <string>
       * @example 20230217
       */
      expiredAt: string;
      /**
       * @description 만료일까지 남은 일수
       * @default <integer>
       * @example 365
       */
      daysUntilExpired: number;
      /**
       * @description 디스플레이용 상품명
       * @default <string>
       */
      displayPrdtNm: string;
      /**
       * @description 디스플레이용 클럽명
       * @default <string>
       */
      displayClubNm: string;
      /**
       * @description CMS Master ID
       * @default <string>
       */
      masterId: string;
      paymentMethodType: components["schemas"]["PaymentMethodType"];
    };
    MyMembershipScreenState: {
      memberships: components["schemas"]["MyMembershipCardModel"][];
    };
    MyMembershipScreenStateV4: {
      memberships: components["schemas"]["MyMembershipCardModelV3"][];
    };
    MyMembershipCardModelV3: {
      /**
       * @description My Membership ID
       * @default <string>
       */
      id: string;
      stsuts: components["schemas"]["MembershipStatusDto"];
      paymentStatus: components["schemas"]["TransactionStatus"];
      /**
       * @description 상품 Id
       * @default <string>
       */
      productId: string;
      /**
       * @description 상품 이름
       * @default <string>
       * @example 김영익 offcial club 경제 나무반
       */
      productName: string;
      /**
       * @description 결제 수단
       * @default <string>
       * @example 신용카드
       */
      paymentMethod: string;
      paymentMethodProvider: components["schemas"]["MyMembershipPaymentProviderDto"];
      /**
       * @description 결제 수단 정보
       * @default <string>
       * @example 8762********1906
       */
      paymentMethodInfo: string;
      /**
       * @description 만료일 (YYYYMMDD)
       * @default <string>
       * @example 20230217
       */
      expiredAt: string;
      /**
       * @description 만료일까지 남은 일수
       * @default <integer>
       * @example 365
       */
      daysUntilExpired: number;
      /**
       * @description 디스플레이용 상품명
       * @default <string>
       */
      displayPrdtNm: string;
      /**
       * @description 디스플레이용 클럽명
       * @default <string>
       */
      displayClubNm: string;
      /**
       * @description CMS Master ID
       * @default <string>
       */
      masterId: string;
      /**
       * @description 멤버십 변경 불가능 여부
       * @default false
       */
      isUnChangeable: boolean;
      paymentMethodType: components["schemas"]["PaymentMethodType"];
      /**
       * @description 결제 수단 변경 가능 여부
       * @default false
       */
      isPaymentMethodChangeable: boolean;
    };
    TransactionHistoryCardModel: {
      status: components["schemas"]["TransactionStatus"];
      /**
       * @description 결제 수단 제공자
       * @enum {string}
       */
      paymentMethodProvider: "google" | "apple" | "hecto";
    };
    PurchaseSuccessCardModel: {
      status: components["schemas"]["TransactionStatus"];
      /**
       * @description 결제 수단 제공자
       * @default <string>
       * @enum {string}
       */
      paymentMethodProvider: "google" | "apple" | "hecto";
      /**
       * @description 결제 금액
       * @default <integer>
       */
      amount: number;
      /**
       * @description 결제 방법
       * @default <string>
       */
      paymentMethod: string;
      /**
       * @description 결제 수단 정보
       * @default <string>
       */
      paymentMethodInfo: string;
      /**
       * @description 결제 시간 (YYYY-MM-DD HH:mm)
       * @default <string>
       */
      paymentDateTime: string;
    };
    PurchaseFailCardModel: {
      status: components["schemas"]["TransactionStatus"];
      /**
       * @description 결제 수단 제공자
       * @enum {string}
       */
      paymentMethodProvider: "google" | "apple" | "hecto";
      /** @description 결제 금액 */
      amount: number;
      /** @description 결제 방법 */
      paymentMethod: string;
      /** @description 결제 수단 정보 */
      paymentMethodInfo: string;
      /** @description 결제 시간 (YYYY-MM-DD HH:mm) */
      paymentDateTime: string;
    };
    SubscriptionCancelCardModel: {
      status: components["schemas"]["TransactionStatus"];
      /**
       * @description 결제 수단 제공자
       * @enum {string}
       */
      paymentMethodProvider: "google" | "apple" | "hecto";
      /** @description 구독 해지 신청 시 만료 일자 (YYYYMMDD) */
      subscriptionExpiredAt: string;
      /** @description 변경 시간 (YYYYMMDD) */
      updateDateTime: string;
    };
    SubscriptionCancelWithdrawCardModel: {
      status: components["schemas"]["TransactionStatus"];
      /**
       * @description 결제 수단 제공자
       * @enum {string}
       */
      paymentMethodProvider: "google" | "apple" | "hecto";
      /** @description 철회, 고정값 */
      statusText: string;
      /** @description 변경 시간 (YYYYMMDD) */
      updateDateTime: string;
    };
    SubscriptionChangeCardModel: {
      status: components["schemas"]["TransactionStatus"];
      /**
       * @description 결제 수단 제공자
       * @enum {string}
       */
      paymentMethodProvider: "google" | "apple" | "hecto";
      /** @description 즉시변경, 고정값 */
      statusText: string;
      /**
       * @description 변경 될 상품명 ex : 경제 새벽반
       * @default
       */
      changedDisplayPrdtNm: string;
      /**
       * @description 변경 될 클럽명 ex: 김영익 Official Club
       * @default
       */
      changedDisplayClubNm: string;
      /** @description 변경 시간 (YYYYMMDD) */
      updateDateTime: string;
    };
    Pagination: {
      /** @default <integer> */
      offset: number;
      /** @default <integer> */
      limit: number;
      /** @default <integer> */
      total: number;
    };
    MyMembershipDetailScreenState: {
      membership: components["schemas"]["MyMembershipCardModel"];
      transcations: (
        | components["schemas"]["PurchaseSuccessCardModel"]
        | components["schemas"]["PurchaseFailCardModel"]
        | components["schemas"]["SubscriptionCancelCardModel"]
        | components["schemas"]["SubscriptionChangeCardModel"]
        | components["schemas"]["SubscriptionCancelWithdrawCardModel"]
      )[];
    };
    /**
     * @description 결제수단
     * @default <string>
     * @enum {string}
     */
    HectoMethodType: "card" | "corp" | "unknown";
    membershipProductHectoModel: {
      /**
       * @description product id
       * @default <string>
       */
      id: string;
      /**
       * @description 상점에서 생성하는 고유 주문번호
       * @default <string>
       */
      mchtTrdNo: string;
      /**
       * @description 결제상품명
       * @default <string>
       */
      pmtPrdtNm: string;
      /**
       * @description 거래금액, AES 암호화
       * @default <string>
       */
      trdAmt: string;
      /**
       * @description 기타 주문 정보를 입력하는 상점 예약 필드, 로그인 하지 않은 경우 undefined
       * @default <string>
       */
      mchtParam: string;
      /**
       * @description 가격 단위(원), Display 용도, 거래금액과 같음
       * @default <number>
       */
      price: number;
      /**
       * @description 구독 기간
       * @default <string>
       * @enum {string}
       */
      period: "1m" | "3m" | "6m" | "1y";
      /** @description 멤버쉽에 포함되는 시크릿 리스트, 없으면 빈 배열 */
      secrets?: string[];
      /** @description 멤버쉽에 포함되는 라이브 리스트, 없으면 빈 배열 */
      lives?: string[];
      /**
       * @description 디스플레이용 플래그
       * @default <boolean>
       */
      isSecretAll: boolean;
      /**
       * @description 디스플레이용 플래그
       * @default <boolean>
       */
      isLiveAll: boolean;
      /**
       * @description 디스플레이용 상품명
       * @default <string>
       */
      displayPrdtNm: string;
      /**
       * @description 상품 그룹
       * @default <string>
       */
      groupId: string;
      /**
       * @description 이번 결제 금액
       * @default <number>
       */
      currentPaymentPrice: number;
      /**
       * Format: date-time
       * @description 다음 결제일 (UTC)
       * @default <dateTime>
       */
      nextPaymentDate: string;
      /**
       * @description 다음 결제 금액
       * @default <number>
       */
      nextPaymentPrice: number;
      /**
       * @description 프로모션 여부
       * @default <boolean>
       */
      isPromotionActive: boolean;
      /**
       * @description 프로모션 금액
       * @default <number>
       */
      promotionDisCountedPrice: number;
      paymentMethodType?: components["schemas"]["PaymentMethodType"];
    };
    /**
     * @description 삼성페이 카드구분
     * @default <string>
     * @enum {string}
     */
    HectoCardGBType: "SSP";
    /**
     * @description 카카오페이, 네이버페이 결제 구분 코드
     * @default <string>
     * @enum {string}
     */
    HectoCorpPayCodeType: "KKP" | "NVP";
    /**
     * @default <string>
     * @enum {string}
     */
    PaymentMethodChangeType: "FULL_PAYMENT" | "PARTIAL_REFUND" | "NONE";
    ResponseGetMyMembershipPaymentMethodChangeDto: {
      /**
       * @description 상점아이디
       * @default <string>
       */
      mchtId: string;
      method: components["schemas"]["HectoMethodType"];
      cardGb?: components["schemas"]["HectoCardGBType"];
      corpPayCode?: components["schemas"]["HectoCorpPayCodeType"];
      /**
       * @description 상점한글명
       * @default <string>
       */
      mchtName: string;
      /**
       * @description 상점영문명
       * @default <string>
       */
      mchtEName: string;
      /**
       * @description 결제 후 알림 전달되는 API URL
       * @default <string>
       */
      notiUrl: string;
      /**
       * @description 결제 후 성공 결과 전달되는 API URL
       * @default <string>
       */
      nextUrl: string;
      /**
       * @description 결제 후 취소 결과 전달되는 API URL
       * @default <string>
       */
      cancUrl: string;
      /**
       * @description 요청일자, yyyyMMdd, ex: 20211231
       * @default <string>
       */
      trdDt: string;
      /**
       * @description 요청시간, HH24MISS, ex: 100000
       * @default <string>
       */
      trdTm: string;
      /**
       * @description SHA256 방식으로 생성한 해쉬값, 호출 시점에 결정 됨
       * @default <string>
       */
      pktHash: string;
      product: components["schemas"]["membershipProductHectoModel"];
      paymentMethodChangeType: components["schemas"]["PaymentMethodChangeType"];
    };
    MembershipsProduct: {
      /**
       * @description 서비스에서 사용되는 상품 id, productId
       * @default <string>
       */
      id: string;
      /**
       * @description 상품명
       * @default <string>
       */
      name: string;
      /**
       * @description 가격
       * @default <integer>
       */
      price: number;
      /**
       * @description 결제 수단 키 값
       * @default <string>
       */
      paymentMethodId: string;
      /**
       * @description 구독 그룹 id, 같은 그룹 안에서는 하나의 구독만 가능, 업, 다운그레이드 가능, masterId 도 동일하게 적용
       * @default <string>
       */
      groupId: string;
      /**
       * @description 구독 요금제 id
       * @default <string>
       */
      planId: string;
      /**
       * @description CMS MasterId 추후 공통 DB index key 로 변경 예정
       * @default <string>
       */
      masterId: string;
      /**
       * @description 구독 기간
       * @default <string>
       * @enum {string}
       */
      period: "1m" | "3m" | "6m" | "1y";
      /** @description 멤버쉽에 포함되는 시크릿 리스트, 없으면 빈 배열 */
      secrets: string[];
      /** @description 멤버쉽에 포함되는 라이브 리스트, 없으면 빈 배열 */
      lives: string[];
      /**
       * @description 디스플레이용 플래그
       * @default <boolean>
       */
      isSecretAll: boolean;
      /**
       * @description 디스플레이용 플래그
       * @default <boolean>
       */
      isLiveAll: boolean;
      /**
       * @description 디스플레이용 상품명
       * @default <string>
       */
      displayPrdtNm: string;
      /**
       * @description 디스플레이용 클럽명
       * @default <string>
       */
      displayClubNm: string;
    };
    MyMembershipCancelScreenState: {
      product: components["schemas"]["MembershipsProduct"];
      /**
       * @description 구독해지일 (YYYYMMDD)
       * @default <string>
       */
      expiredAt: string;
    };
    /**
     * @description 결과
     * @default <string>
     * @enum {string}
     */
    CancelResultDto: "success" | "fail";
    ResponsePostMyMembershipCancel: {
      /**
       * @description 구독해지일 (YYYYMMDD)
       * @default <string>
       */
      expiredAt: string;
      result: components["schemas"]["CancelResultDto"];
    };
    /**
     * @description 결과
     * @default <string>
     * @enum {string}
     */
    RenewResultDto: "success" | "fail";
    ResponsePostMyMembershipRenew: {
      /**
       * @description 구독해지일 (YYYYMMDD)
       * @default <string>
       */
      expiredAt: string;
      result: components["schemas"]["RenewResultDto"];
    };
    membershipProductHectoChangeProductModel: {
      /**
       * @description Product ID
       * @default <string>
       */
      id: string;
      /**
       * @description 가격
       * @default <number>
       */
      price: number;
      /**
       * @description 디스플레이용 상품명
       * @default <string>
       */
      displayPrdtNm: string;
      /** @description 멤버쉽에 포함되는 시크릿 리스트, 없으면 빈 배열 */
      secrets: string[];
      /** @description 멤버쉽에 포함되는 라이브 리스트, 없으면 빈 배열 */
      lives: string[];
      /**
       * @description 디스플레이용 플래그
       * @default <boolean>
       */
      isSecretAll: boolean;
      /**
       * @description 디스플레이용 플래그
       * @default <boolean>
       */
      isLiveAll: boolean;
      /**
       * @description 구독 기간
       * @default <string>
       * @enum {string}
       */
      period: "1m" | "3m" | "6m" | "1y";
    };
    membershipProductHectoChangeModel: {
      product: components["schemas"]["membershipProductHectoChangeProductModel"];
      /**
       * @description 변경에 대한 상태 값
       * @default <string>
       */
      changeState: string;
      /**
       * @description 변경 될 구독해지일 (YYYYMMDD)
       * @default <string>
       */
      changedExpiredAt: string;
    };
    ResponseGetMyMembershipChange: {
      /** @description 변경 가능한 리스트 목록 */
      memberships: components["schemas"]["membershipProductHectoChangeModel"][];
    };
    RequestPostMyMembershipChange: {
      /**
       * @description 변경 할 Product ID
       * @default <string>
       */
      productId: string;
    };
    ResponsePostMyMembershipChange: {
      /**
       * @description 변경 될 구독해지일 (YYYYMMDD)
       * @default <string>
       */
      changedExpiredAt: string;
      result: components["schemas"]["RenewResultDto"];
    };
    MyMastersScreenV2ResponseDto: {
      masters: components["schemas"]["MasterCardModelV2"][];
    };
    AssetsProduct: {
      /**
       * @description 서비스에서 사용되는 상품 id, productId
       * @default <string>
       */
      id: string;
      /**
       * @description 상품명
       * @default <string>
       */
      name: string;
      /**
       * @description 가격
       * @default <integer>
       */
      price: number;
      /**
       * @description 결제 수단 키 값
       * @default <string>
       */
      paymentMethodId: string;
      /**
       * @description 일회성 구매 id
       * @default <string>
       */
      purchaseId: string;
      /**
       * @description 충전되는 애셋 값
       * @default <integer>
       */
      value: number;
      /**
       * @description 인기 상품 여부
       * @default <boolean>
       */
      isPopular: boolean;
      /**
       * @description 할인율
       * @default <integer>
       */
      discountPercentage: number;
    };
    requestPostMeProductsAssetsDto: {
      /**
       * @description 거래 토큰
       * @default <string>
       */
      transcationToken: string;
      product: components["schemas"]["AssetsProduct"];
    };
    responsePostMeProductsAssetsDto: {
      /**
       * @description 거래 토큰
       * @default <string>
       */
      transcationToken: string;
      transcationState: components["schemas"]["TransactionStatus"];
      product: components["schemas"]["AssetsProduct"];
    };
    /**
     * @description 컨텐츠 타입
     * @default <string>
     * @enum {string}
     */
    MyContentType: "secret";
    requestPostMyContentDto: {
      /**
       * @description CMS Contents ID
       * @default <string>
       */
      contentId: string;
      contentType: components["schemas"]["MyContentType"];
    };
    MyContentDto: {
      /**
       * @description CMS Contents ID
       * @default <string>
       */
      contentId: string;
      contentType: components["schemas"]["MyContentType"];
    };
    responsePostMyContentDto: {
      content: components["schemas"]["MyContentDto"];
    };
    GetRedDotResponseDto: {
      /** @default <boolean> */
      hasNew: boolean;
    };
    GetRedDotResponse: {
      data: components["schemas"]["GetRedDotResponseDto"];
    };
    InterestRankListTileModel: {
      title: components["schemas"]["InterestType"];
      /**
       * @description 순위
       * @default <integer>
       * @example 1
       */
      rank: number;
    };
    InterestRankDialogModel: {
      ranks: components["schemas"]["InterestRankListTileModel"][];
    };
    /**
     * @description 시크릿 타입
     * @default <string>
     * @enum {string}
     */
    SecretTypeDto: "none" | "article" | "video" | "audio";
    SecretScreenV2ResponseDto: {
      /**
       * @description secretId
       * @default <string>
       * @example 1
       */
      secretId: string;
      /**
       * @description seriesId
       * @default <string>
       * @example 1
       */
      seriesId: string;
      type: components["schemas"]["SecretTypeDto"];
      /**
       * @default <string>
       * @example 강달러 고금리는 끝나는가?
       */
      title: string;
      /**
       * Format: url
       * @description type article is null
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/TestVideo.mp4
       */
      mediaUrl: string;
      /** @default <string> */
      html: string;
      /** @default <string> */
      previewHtml: string;
      /**
       * Format: url
       * @description type article and audio is null, 현재 Mock Data 사용 중
       * @default <url>
       */
      mediaThumbnailUrl: string;
      /**
       * Format: url
       * @description article URL
       * @default <url>
       * @example https://example.com
       */
      contentUrl: string;
      /**
       * @description 회차
       * @default <integer>
       * @example 1
       */
      episodeCount: number;
      /**
       * @description 총 회차, 상위 series items length 사용, 예약된 회차나 그런 의미가 아님
       * @default <integer>
       * @example 10
       */
      totalEpisodeCount: number;
      /**
       * Format: url
       * @description CDN URL
       * @default <url>
       */
      streamingURL: string;
      pdfUrl?: components["schemas"]["PDFData"][] | null;
      /**
       * @description 권한 여부
       * @default <boolean>
       * @example true
       */
      hasAuthority: boolean;
      /**
       * @description 유저 북마크 여부
       * @default <boolean>
       * @example true
       */
      isScraped: boolean;
      /**
       * @description 안 쓰는 값, 0으로 고정
       * @default <integer>
       * @example 100
       */
      commentCount: number;
      /**
       * @description 다음 회차 id, 없으면 null
       * @default <string>
       */
      nextId: string;
      /**
       * @description 이전 회차 id, 없으면 null
       * @default <string>
       */
      prevId: string;
      /**
       * @description cookie info
       * @default <string>
       */
      cookie: string;
      /**
       * @description 가격
       * @default <integer>
       */
      price: number;
      /**
       * @description 마스터 아이디
       * @default <string>
       */
      masterId: string;
      pickCounts: components["schemas"]["PickCountDto"][];
      selectedPickType?: components["schemas"]["PickCountType"];
      /**
       * @default <boolean>
       * @example true
       */
      isUserPicked: boolean;
      /**
       * Format: double
       * @default <double>
       */
      fontSize: number;
      /**
       * Format: double
       * @default <double>
       */
      lineHeight: number;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterProfileImage: string;
      /**
       * @default <string>
       * @example 미주부
       */
      masterDetailKeyCareer: string;
      /** @default <boolean> */
      masterIsCommentBlock: boolean;
      /**
       * @description 권한 여부
       * @default <boolean>
       */
      webHasAuthority: boolean;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    SeriesScreenOrderDto: "episode" | "latest";
    /**
     * @description free 무료, prePurchased 유료-구매전, purchased 유료-구매후
     * @default <string>
     * @enum {string}
     */
    TransactionTypeDto: "none" | "free" | "prePurchased" | "purchased";
    /**
     * @description 컨텐츠의 권한 상태
     * @default <string>
     * @enum {string}
     */
    ContentAuthorityStatusDto: "none" | "membership" | "purchased";
    SecretBriefCardDtoV3: {
      /**
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * @default <string>
       * @example 강달러 고금리는 끝났는가?
       */
      title: string;
      /**
       * Format: date-time
       * @default <dateTime>
       * @example 2023-04-24T08:43:15.420Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @default <dateTime>
       * @example 2023-04-24T08:43:15.420Z
       */
      updatedAt: string;
      /**
       * @description 에셋
       * @default <integer>
       * @example 1000
       */
      price: number;
      type: components["schemas"]["TransactionTypeDto"];
      /**
       * @description 회차
       * @default <integer>
       * @example 1
       */
      episodeCount: number;
      /**
       * @default <boolean>
       * @example 읽음여부
       */
      didRead: boolean;
      contentType: components["schemas"]["SecretTypeDto"];
      /**
       * @description 보는 시점 기준 48시간 내에 발행된 콘텐츠이며 읽지 않은 콘텐츠일 경우 new 표현
       * @default <boolean>
       */
      hasNew: boolean;
      contentAuthorityStatus: components["schemas"]["ContentAuthorityStatusDto"];
    };
    SeriesScreenV3ResponseDto: {
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/secret_img.png
       */
      coverImageUrl: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile02.png
       */
      portraitUrl: string;
      /**
       * @default <string>
       * @example 김영익
       */
      name: string;
      /**
       * @default <string>
       * @example 클럽 아이디
       */
      creatorClubId: string;
      /**
       * @description 안 쓰이는 값
       * @default <integer>
       * @example 27877
       */
      rateCount: number;
      /**
       * @default <string>
       * @example 2023년 트렌드로 읽는 경제의 정석
       */
      title: string;
      /**
       * @default <string>
       * @example 더 많은 돈을 벌고 지키려면? 나의 재정 시스템을 점검하고 재정비하자! 원하는 만큼 부를 이룬 사람들의 재정 플랜과 여기서부터 짤립니다
       */
      desc: string;
      tierType?: components["schemas"]["UserTierTypeDto"];
      recommendationSeries?: components["schemas"]["SeriesCardDto"][] | null;
      /**
       * @description 유저 북마크 여부
       * @default <boolean>
       * @example true
       */
      isScraped: boolean;
      /**
       * @description 안 읽은 시크릿 수
       * @default <integer>
       */
      hasUnReadCount: number;
      /**
       * @description 총 갯수
       * @default <integer>
       */
      totalCount: number;
      secrets: components["schemas"]["SecretBriefCardDtoV3"][];
    };
    HelpDeskScreenState: {
      /**
       * @description 읽지않은 공지사항 수
       * @default <integer>
       */
      noticeCount: number;
      /**
       * @description 카카오톡 오픈채팅 링크
       * @default <string>
       */
      kakaoOpenChat: string;
    };
    NoticeScreenState: {
      /**
       * @default <string>
       * @example 김영익, 홍익희 마스터의 구독 가격 정책이 변경되었습니다.
       */
      title: string;
      /**
       * @default <string>
       * @example <특징테마> 2차전지는 큰 폭이 하락, 기존의 주도주가 무너지는 모습 반면 새로운 수급은 컨텐츠, 엔터, 화장품 등 중국 리오프닝 그 외에도 인터넷, 우크라재건, 일부 게임주 강세 반도체도 삼성전자 하이닉스 강세로 시장상승을 주도 <특징테마> 2차전지는 큰 폭이 하락, 기존의 주도주가 무너지는 모습 반면 새로운 수급은 컨텐츠, 엔터, 화장품 등 중국 리오프닝 그 외에도 인터넷, 우크라재건, 일부 게임주 강세 반도체도 삼성전자 하이닉스 강세로 시장상승을 주도 <특징테마> 2차전지는 큰 폭이 하락, 기존의 주도주가 무너지는 모습 반면 새로운 수급은 컨텐츠, 엔터, 화장품 등 중국 리오프닝 그 외에도 인터넷, 우크라재건, 일부 게임주 강세 반도체도 삼성전자 하이닉스 강세로 시장상승을 주도
       */
      desc: string;
      /**
       * Format: date-time
       * @default <dateTime>
       * @example 2023-03-07T08:43:15.420Z
       */
      createdAt: string;
      /**
       * @default <string>
       * @example 어스얼라이언스
       */
      creator: string;
    };
    assetProductDto: {
      /** @description productId, 서비스 상품 키 값 */
      id: string;
      /** @description 일회성 결제 키 값 */
      purchaseId: string;
      /** @description 결제 수단 키 값 */
      paymentMethodId: string;
      /** @description 상품명, 디스플레이 용 */
      name: string;
      /** @description 가격, 디스플레이 용 */
      price: number;
    };
    getAssetProductsResponseDto: {
      products: components["schemas"]["AssetsProduct"][];
    };
    getMembershipProductsResponseDto: {
      /**
       * @description 마스터 아이디 (내부 사용)
       * @default <string>
       */
      masterId: string;
      /**
       * @description 그룹 아이디 (구글, 애플에서 사용)
       * @default <string>
       */
      groupId: string;
      /**
       * @description 그룹명 (구글, 애플에서 사용)
       * @default <string>
       */
      groupName: string;
      products: components["schemas"]["MembershipsProduct"][];
    };
    getMembershipProductsHectoResponseDto: {
      /**
       * @description master cms id
       * @default <string>
       */
      masterId: string;
      /**
       * @description 상점아이디
       * @default <string>
       */
      mchtId: string;
      /**
       * @description 상점한글명
       * @default <string>
       */
      mchtName: string;
      /**
       * @description 상점영문명
       * @default <string>
       */
      mchtEName: string;
      products?: components["schemas"]["membershipProductHectoModel"][];
    };
    getMembershipProductDetailHectoResponseDto: {
      /**
       * @description 상점아이디
       * @default <string>
       */
      mchtId: string;
      method: components["schemas"]["HectoMethodType"];
      cardGb?: components["schemas"]["HectoCardGBType"];
      corpPayCode?: components["schemas"]["HectoCorpPayCodeType"];
      /**
       * @description 상점한글명
       * @default <string>
       */
      mchtName: string;
      /**
       * @description 상점영문명
       * @default <string>
       */
      mchtEName: string;
      /**
       * @description 결제 후 알림 전달되는 API URL
       * @default <string>
       */
      notiUrl: string;
      /**
       * @description 결제 후 성공 결과 전달되는 API URL
       * @default <string>
       */
      nextUrl: string;
      /**
       * @description 결제 후 취소 결과 전달되는 API URL
       * @default <string>
       */
      cancUrl: string;
      /**
       * @description 요청일자, yyyyMMdd, ex: 20211231
       * @default <string>
       */
      trdDt: string;
      /**
       * @description 요청시간, HH24MISS, ex: 100000
       * @default <string>
       */
      trdTm: string;
      /**
       * @description SHA256 방식으로 생성한 해쉬값, 호출 시점에 결정 됨
       * @default <string>
       */
      pktHash: string;
      product: components["schemas"]["membershipProductHectoModel"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    LOGIN_TYPE: "direct" | "google" | "apple" | "naver" | "kakao" | "admin";
    getMyAuthV2Dto: {
      provider: components["schemas"]["LOGIN_TYPE"];
      /**
       * @default <string>
       * @example google_subId_test
       */
      subId: string;
      /**
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * @default <string>
       * @example 행복한 투자자
       */
      nickName: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
       */
      portraitUrl: string;
      /**
       * @default <string>
       * @example 01033334444
       */
      phoneNumber: string;
      /**
       * Format: email
       * @default <email>
       * @example test@gmail.com
       */
      email: string;
      /** @default <integer> */
      currentAsset: number;
      role: components["schemas"]["USER_ROLE"];
      /**
       * @description 튜토리얼 완료 여부
       * @default <boolean>
       */
      isFinishedTUT: boolean;
    };
    /**
     * @default user
     * @enum {string}
     */
    UserRoleDto: "user" | "tester" | "admin" | "master";
    getMyAuthDto: {
      provider: components["schemas"]["LoginTypeDto"];
      /**
       * @default <string>
       * @example google_subId_test
       */
      subId: string;
      /**
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * @default <string>
       * @example 행복한 투자자
       */
      nickName: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
       */
      portraitUrl: string;
      /**
       * @default <string>
       * @example 01033334444
       */
      phoneNumber: string;
      /**
       * Format: email
       * @default <email>
       * @example test@gmail.com
       */
      email: string;
      /** @default <integer> */
      currentAsset: number;
      role: components["schemas"]["UserRoleDto"];
      /**
       * @description 튜토리얼 완료 여부
       * @default <boolean>
       */
      isFinishedTUT: boolean;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    DeviceTypeDto: "APNS" | "GCM";
    /**
     * @description Local Permission 상태
     * @default <string>
     * @enum {string}
     */
    PermissionStatusTypeDto:
      | "unknown"
      | "denied"
      | "permanentlyDenied"
      | "granted"
      | "restricted"
      | "limited"
      | "provisional";
    PostDeviceBodyV3Dto: {
      deviceType: components["schemas"]["DeviceTypeDto"];
      /**
       * @description FCM 토큰
       * @default <string>
       */
      deviceToken: string;
      /**
       * @description 디바이스 모델
       * @default <string>
       */
      deviceModel: string;
      /**
       * @description 기기 고유 번호
       * @default <string>
       */
      deviceId: string;
      permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
    };
    PostDeviceV3Dto: {
      /**
       * @description 유저 아이디
       * @default <string>
       */
      userId: string;
      /**
       * @description 국가
       * @default <string>
       */
      country: string;
      /**
       * @description 언어
       * @default <string>
       */
      language: string;
      /** @default <integer> */
      timezone: number;
      deviceType: components["schemas"]["DeviceTypeDto"];
      /**
       * @description FCM 토큰
       * @default <string>
       */
      deviceToken: string;
      /**
       * @description device의 아이디
       * @default <string>
       */
      id: string;
      /**
       * @description 디바이스 모델
       * @default <string>
       */
      deviceModel: string;
      /** @description 디바이스 모델 */
      pushTopics: components["schemas"]["PushTopicDto"][];
      /**
       * @description 삭제 여부
       * @default <boolean>
       */
      deleted: boolean;
    };
    RefreshTokenBodyDto: {
      /**
       * @description refresh token
       * @default <string>
       */
      refreshToken: string;
    };
    TokenDto: {
      /**
       * @description Token
       * @default <string>
       */
      token: string;
      /**
       * Format: date-time
       * @description Token 만료시간
       * @default <dateTime>
       */
      expires: string;
    };
    RefreshTokenDto: {
      access: components["schemas"]["TokenDto"];
      refresh: components["schemas"]["TokenDto"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    PushTopicType: "MASTER" | "EVENT";
    PushTopicDto: {
      name: components["schemas"]["PushTopicType"];
      /** @default <boolean> */
      isSubscribed: boolean;
      /** @default <string> */
      _id: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      updatedAt: string;
    };
    /**
     * @description 가입방법
     * @default <string>
     * @enum {string}
     */
    ProviderTypeDto: "direct" | "apple" | "google" | "naver" | "kakao";
    ValidateAccessTokenDto: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
       * @default <string>
       */
      password: string;
      /**
       * Format: url
       * @description 업로드 한 유저의 프로필 URL
       * @default <url>
       */
      portraitURL: string;
      /**
       * @description 닉네임
       * @default <string>
       */
      nickName: string;
      /** @default <string> */
      phoneNumber: string;
      pushTopics: components["schemas"]["PushTopicDto"][];
      /**
       * @description DataBase에 저장된 회원의 id
       * @default <string>
       */
      id: string;
    };
    ValidateAuthCodeBodyDto: {
      /**
       * @description 핸드폰 번호를 숫자만 입력해주세요
       * @default <string>
       */
      phoneNumber: string;
      /** @default <integer> */
      code: number;
      provider: components["schemas"]["ProviderTypeDto"];
    };
    ValidateAuthCodeDto: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /** @default <integer> */
      code: number;
      /** @default <string> */
      phoneNumber: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      expires: string;
      /** @default <string> */
      id: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    AuthCodeTypeDto: "signup" | "resetPassword";
    SendAuthCodeBodyDto: {
      /**
       * @description 핸드폰 번호를 숫자만 입력해주세요
       * @default <string>
       */
      phoneNumber: string;
      type: components["schemas"]["AuthCodeTypeDto"];
      provider: components["schemas"]["ProviderTypeDto"];
    };
    SendAuthCodeDto: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /** @default <string> */
      phoneNumber: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      expires: string;
      /** @default <string> */
      id: string;
      /** @default <integer> */
      code: number;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    AuthCodeTypeV2Dto: "signup" | "resetPassword" | "addPhone";
    SendAuthCodeBodyV2Dto: {
      /**
       * @description 핸드폰 번호를 숫자만 입력해주세요
       * @default <string>
       */
      phoneNumber: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /**
       * @description 유저 subId
       * @default <string>
       */
      subId: string;
      type: components["schemas"]["AuthCodeTypeV2Dto"];
    };
    DirectLoginBodyDto: {
      /**
       * @description subId and provider must be unique
       * @default <string>
       */
      subId: string;
      /**
       * Format: password
       * @default <password>
       */
      password: string;
    };
    DirectLoginDto: {
      /**
       * @description 인증 성공 여부
       * @default <boolean>
       */
      auth: boolean;
      /**
       * @description 가입 여부
       * @default <boolean>
       */
      join: boolean;
      /**
       * @description subId (가입이 되어 있는 경우 subId 를 보내준다.)
       * @default <string>
       */
      subId: string;
      /**
       * @description accessToken
       * @default <string>
       */
      accessToken: string;
      /**
       * Format: date-time
       * @description accessExpires
       * @default <dateTime>
       */
      accessExpires: string;
      /**
       * @description refreshToken
       * @default <string>
       */
      refreshToken: string;
      /**
       * Format: date-time
       * @description refreshExpires
       * @default <dateTime>
       */
      refreshExpires: string;
      /** @default <boolean> */
      shouldRecommendation: boolean;
    };
    DirectLoginV2ResponseDto: {
      /**
       * @description 인증 성공 여부
       * @default <boolean>
       */
      auth: boolean;
      /**
       * @description 가입 여부
       * @default <boolean>
       */
      join: boolean;
      /**
       * @description subId (가입이 되어 있는 경우 subId 를 보내준다.)
       * @default <string>
       */
      subId: string;
      /**
       * @description accessToken
       * @default <string>
       */
      accessToken: string;
      /**
       * Format: date-time
       * @description accessExpires
       * @default <dateTime>
       */
      accessExpires: string;
      /**
       * @description refreshToken
       * @default <string>
       */
      refreshToken: string;
      /**
       * Format: date-time
       * @description refreshExpires
       * @default <dateTime>
       */
      refreshExpires: string;
      /** @default <boolean> */
      shouldRecommendation: boolean;
      user: components["schemas"]["getMyAuthDto"];
    };
    RequestBodyPhoneNumberCheckDuplicationDto: {
      /**
       * @description 전화번호
       * @default <string>
       */
      phoneNumber: string;
    };
    DuplicateUser: {
      /**
       * @description 전화번호
       * @default <string>
       */
      phoneNumber: string;
      /**
       * @description 가입날짜
       * @default <string>
       */
      joinDate: string;
      /**
       * @description 별칭
       * @default <string>
       */
      nickName: string;
      provider: components["schemas"]["ProviderTypeDto"];
    };
    ResponsePhoneNumberCheckDuplicationDto: {
      /**
       * @description 전화번호 중복 여부
       * @default <boolean>
       */
      isDuplicate: boolean;
      /** @description 중복된 유저 정보 배열 */
      users?: components["schemas"]["DuplicateUser"][] | null;
    };
    LoginSuccessDto: {
      /**
       * @description 인증 성공 여부
       * @default <boolean>
       */
      auth: boolean;
      /**
       * @description 가입 여부
       * @default <boolean>
       */
      join: boolean;
      /**
       * @description provider unique id
       * @default <string>
       */
      subId: string;
      /**
       * @description access token
       * @default <string>
       */
      accessToken: string;
      /**
       * @description access token 만료 시간
       * @default <string>
       */
      accessExpires: string;
      /**
       * @description refresh token
       * @default <string>
       */
      refreshToken: string;
      /**
       * @description refresh token 만료 시간
       * @default <string>
       */
      refreshExpires: string;
      /**
       * @description findFollows.length === 0 인 경우 true, 아니면 false
       * @default <boolean>
       */
      shouldRecommendation: boolean;
      /**
       * @default <string>
       * @enum {string}
       */
      userProvider: "direct" | "google" | "apple" | "naver" | "kakao";
      /**
       * @description provider가 direct인 경우 전화번호와 같음, 다른 경우는 provider에서 받은 id
       * @default <string>
       */
      userSubId: string;
      /**
       * @description mongoDB ObjectId
       * @default <string>
       */
      userId: string;
      /** @default <string> */
      userNickName: string;
      /**
       * Format: url
       * @default <url>
       */
      userPortraitUrl: string;
      /**
       * @description 전화번호, 숫자로만 이뤄진 문자열 ex: 01012345678
       * @default <string>
       */
      userPhoneNumber: string;
      /**
       * Format: email
       * @default <email>
       */
      userEmail: string;
      /**
       * @default <string>
       * @enum {string}
       */
      userRole: "user" | "tester" | "admin" | "master";
      /**
       * @description 튜토리얼 완료 여부
       * @default <boolean>
       */
      userIsFinishedTUT: boolean;
      /**
       * @description 보유 에셋, 숫자로만 이뤄진 문자열 ex: 100000
       * @default <string>
       */
      userCurrentAsset: string;
    };
    LoginNoJoinDto: {
      /** @description 인증 성공 여부 */
      auth: boolean;
      /** @description 가입 여부 */
      join: boolean;
      /** @description provider unique id */
      subId: string;
    };
    NaverAuthTokenDto: {
      /** @default <string> */
      accessToken: string;
      /** @default <string> */
      expiresAt: string;
      /** @default <number> */
      hashCode: number;
      /** @default <string> */
      refreshToken: string;
      /** @default <string> */
      tokenType: string;
    };
    NaverAuthDto: {
      /** @default <string> */
      subId: string;
      token: components["schemas"]["NaverAuthTokenDto"];
    };
    NaverAuthWithNativeRequestDto: {
      data: components["schemas"]["NaverAuthDto"];
    };
    PushSubscribeBodyDataV3: {
      topic: components["schemas"]["PushTopicType"];
      /** @default <string> */
      deviceToken: string;
      deviceType: components["schemas"]["DeviceTypeDto"];
      permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
      /**
       * @description 디바이스 아이디
       * @default <string>
       */
      deviceId: string;
    };
    IsSubscribedDto: {
      /**
       * @description 이벤트 알림 동의 여부
       * @default false
       */
      didEventNotificationAgree: boolean;
      /**
       * @description 마스터 알림 동의 여부
       * @default false
       */
      didMasterNotificationAgree: boolean;
    };
    MembershipWaitlist: {
      /** @default <string> */
      id: string;
      /** @default <boolean> */
      isDisplay: boolean;
      /** @default <string> */
      communityTabImageUrl: string;
      /** @default <string> */
      masterTabImageUrl: string;
      /** @default <string> */
      linkUrl: string;
      /** @default <string> */
      metadata: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      updatedAt: string;
    };
    MembershipWaitlistsResponse: {
      /** @description 곧 멤버쉽이 오픈 되어요 리스트 */
      membershipWaitlists: components["schemas"]["MembershipWaitlist"][];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    RECOMMEND_TYPE: "RECOMMEND";
    MastersResponse: {
      masters: components["schemas"]["Master"][];
    };
    OutBoundLink: {
      /** @default <string> */
      title: string;
      /** @default <string> */
      sourceName: string;
      /**
       * Format: url
       * @default <url>
       */
      imageUrl: string;
      /**
       * Format: url
       * @default <url>
       */
      originUrl: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    SELECTED_PICK_TYPE: "sympathy" | "suggestion" | "expectancy";
    PickedCounts: {
      /** @default <integer> */
      count: number;
      type: components["schemas"]["SELECTED_PICK_TYPE"];
    };
    BaseContentsData: {
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /** Format: date-time */
      publishedAt: string;
      masterName: string;
      masterPortraitUrl: string;
      masterCmsId: string;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconUrl?: string | null;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    PICK_THUMBNAIL_TYPE: "none" | "link" | "image";
    PickMetadataContent: {
      /** @default <string> */
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconUrl: string;
      /** @default <string> */
      title: string;
      /** @default <string> */
      description: string;
      pickThumbnailType: components["schemas"]["PICK_THUMBNAIL_TYPE"];
      /** @default <string> */
      imageUrl: string;
      outBoundLink?: components["schemas"]["OutBoundLink"] | null;
      /** @default <integer> */
      commentCount: number;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /** @default <boolean> */
      isNew: boolean;
      /** @default <boolean> */
      isManyComments: boolean;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    SECRET_TYPE: "article" | "video" | "audio";
    SecretMetadataContent: {
      /** @default <string> */
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconUrl: string;
      /** @default <string> */
      seriesTitle: string;
      /** @default <integer> */
      secretRound: number;
      /** @default <string> */
      secretTitle: string;
      /**
       * Format: url
       * @default <url>
       */
      thumbnailUrl: string;
      /** @default <string> */
      seriesCmsId: string;
      secretType: components["schemas"]["SECRET_TYPE"];
      /** @default <string> */
      summary: string;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /** @default <boolean> */
      isNew: boolean;
      /** @default <integer> */
      commentCount: number;
    };
    SeriesMetadataContent: {
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /** Format: date-time */
      publishedAt: string;
      masterName: string;
      masterPortraitUrl: string;
      masterCmsId: string;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconUrl?: string | null;
      seriesTitle: string;
      latestSecretTitle: string;
      latestSecretRound: number;
      /** Format: date-time */
      latestSecretPublishedAt: string;
      latestSecretIsNew: boolean;
      totalSecretCount: number;
      unReadSecretCount: number;
      seriesImageUrl: string;
    };
    LoungeCommentData: {
      /** @default <string> */
      commentId: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /** @default <string> */
      comment: string;
      /** @default <integer> */
      childCommentCount: number;
      /** @default <boolean> */
      isMasterLike: boolean;
      /** @default <boolean> */
      isMasterComment: boolean;
      /** @default <string> */
      userId: string;
      /** @default <string> */
      userNickName: string;
      userRole: components["schemas"]["USER_ROLE"];
      /**
       * Format: url
       * @default <url>
       */
      userPortraitUrl: string;
      userPaymentInfos: components["schemas"]["UserPaymentInfos"];
      /** @default <string> */
      contentCmsId: string;
      contentCmsType: components["schemas"]["COMMENT_CONTENT_TYPE"];
      /** @default <string> */
      masterName: string;
      /**
       * Format: url
       * @default <url>
       */
      masterPortraitUrl: string;
      /** @default <boolean> */
      isRepliedMasterComment: boolean;
    };
    MasterNoticesData: {
      /**
       * Format: mongo-id
       * @default <mongo-id>
       */
      masterNoticeId: string;
      /** @default <string> */
      masterNoticeCmsId: string;
      /** @default <string> */
      title: string;
      /** @default <string> */
      creator: string;
      /** @default <boolean> */
      isRead: boolean;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
    };
    MasterDetailCareer: {
      /** @default <string> */
      careers: string;
      /** @default <integer> */
      round: number;
    };
    ContentsResponse: {
      contents: (
        | components["schemas"]["PickMetadataContent"]
        | components["schemas"]["SecretMetadataContent"]
      )[];
    };
    MasterContentsResponseV2: {
      contents: (
        | components["schemas"]["PickMetadataContent"]
        | components["schemas"]["SecretMetadataContent"]
        | components["schemas"]["SeriesMetadataContent"]
      )[];
      pagination: components["schemas"]["Pagination"];
    };
    LoungeCommentsResponse: {
      comments: components["schemas"]["LoungeCommentData"][];
    };
    MasterNoticesResponse: {
      masterNotices: components["schemas"]["MasterNoticesData"][];
      pagination: components["schemas"]["Pagination"];
    };
    GetUserJoinCountDto: Record<string, never>;
    GetPerchasedUserCountDto: Record<string, never>;
    GetSalesAmountDto: Record<string, never>;
    ContentsResponseV2: {
      contents: (
        | components["schemas"]["PickMetadataContent"]
        | components["schemas"]["SecretMetadataContent"]
      )[];
      pagination: components["schemas"]["Pagination"];
    };
    Marks: {
      type: string;
      attrs?: string;
    };
    PDF: {
      /** @default <string> */
      pdfUrl: string;
      /** @default <string> */
      fileName: string;
    };
    BaseContentData: {
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /** Format: date-time */
      publishedAt: string;
      masterName: string;
      masterPortraitUrl: string;
      masterCmsId: string;
      masterCompanyFullName?: string | null;
      masterCompanyShortName?: string | null;
      masterCompanyIconUrl?: string | null;
      masterIsCommentBlock: boolean;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /** Format: url */
      contentUrl: string;
      html: string;
      pdf?: components["schemas"]["PDF"][] | null;
      isPickedType?: components["schemas"]["SELECTED_PICK_TYPE"];
      isScrapped: boolean;
      bodyJson: string;
      editorVersion: string;
    };
    MostViewedContent: {
      /** @default <string> */
      cmsId: string;
      /** @default <string> */
      title: string;
      /** @default <integer> */
      round: number;
      /**
       * Format: url
       * @default <url>
       */
      thumbnailUrl: string;
      /** @default <integer> */
      contentViewCount: number;
    };
    PickDetailMetaDataContent: {
      /** @default <string> */
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconUrl: string;
      /** @default <boolean> */
      masterIsCommentBlock: boolean;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /**
       * Format: url
       * @default <url>
       */
      contentUrl: string;
      /** @default <string> */
      html: string;
      pdf?: components["schemas"]["PDF"][] | null;
      isPickedType?: components["schemas"]["SELECTED_PICK_TYPE"];
      /** @default <boolean> */
      isScrapped: boolean;
      /** @default <string> */
      bodyJson: string;
      /** @default <string> */
      editorVersion: string;
      /** @default <string> */
      title: string;
      /** @default <string> */
      imageUrl: string;
      outBoundLink?: components["schemas"]["OutBoundLink"][] | null;
      /** @default <string> */
      masterDetailKeyCareer: string;
    };
    SecretDetailMetadataContent: {
      /** @default <string> */
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconUrl: string;
      /** @default <boolean> */
      masterIsCommentBlock: boolean;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /**
       * Format: url
       * @default <url>
       */
      contentUrl: string;
      /** @default <string> */
      html: string;
      pdf?: components["schemas"]["PDF"][] | null;
      isPickedType?: components["schemas"]["SELECTED_PICK_TYPE"];
      /** @default <boolean> */
      isScrapped: boolean;
      /** @default <string> */
      bodyJson: string;
      /** @default <string> */
      editorVersion: string;
      secretType: components["schemas"]["SECRET_TYPE"];
      /** @default <string> */
      secretTitle: string;
      /** @default <string> */
      seriesCmsId: string;
      /** @default <integer> */
      secretRound: number;
      /** @default <integer> */
      totalSecretCount: number;
      /** @default <string> */
      previewHtml: string;
      /** @default <integer> */
      price: number;
      /** @default <string> */
      prevSecretCmsId: string;
      /** @default <string> */
      prevSecretTitle: string;
      /** @default <string> */
      nextSecretCmsId: string;
      /** @default <string> */
      nextSecretTitle: string;
      /** @default <boolean> */
      hasAuthority: boolean;
      /**
       * Format: double
       * @default <double>
       */
      fontSize: number;
      /**
       * Format: double
       * @default <double>
       */
      lineHeight: number;
      membershipIntroduction?:
        | components["schemas"]["MembershipIntroductionDto"]
        | null;
      /** @default <string> */
      mediaOriginUrl: string;
      /** @default <string> */
      mediaConvertUrl: string;
      /** @default <string> */
      thumbnailUrl: string;
      /** @default <string> */
      cookie: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ContentAuthorityStatus: "membership" | "purchased" | "none";
    SeriesSecretMetadataContent: {
      /** @default <string> */
      cmsId: string;
      /** @default <string> */
      title: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <integer> */
      price: number;
      /** @default <integer> */
      round: number;
      /** @default <boolean> */
      isRead: boolean;
      /** @default <boolean> */
      isNew: boolean;
      secretType: components["schemas"]["SECRET_TYPE"];
      authorityStatus: components["schemas"]["ContentAuthorityStatus"];
    };
    SeriesDetailMetadataContent: {
      /** @default <integer> */
      secretCount: number;
      /** @default <integer> */
      isReadCount: number;
      /**
       * Format: url
       * @default <url>
       */
      imageUrl: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      title: string;
      /** @default <string> */
      description: string;
      /** @default <boolean> */
      isScrapped: boolean;
    };
    SecretDetailMetadataContentV2: {
      /** @default <string> */
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconUrl: string;
      /** @default <boolean> */
      masterIsCommentBlock: boolean;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /**
       * Format: url
       * @default <url>
       */
      contentUrl: string;
      /** @default <string> */
      html: string;
      pdf?: components["schemas"]["PDF"][] | null;
      isPickedType?: components["schemas"]["SELECTED_PICK_TYPE"];
      /** @default <boolean> */
      isScrapped: boolean;
      /** @default <string> */
      bodyJson: string;
      /** @default <string> */
      editorVersion: string;
      secretType: components["schemas"]["SECRET_TYPE"];
      /** @default <string> */
      secretTitle: string;
      /** @default <string> */
      seriesCmsId: string;
      /** @default <integer> */
      secretRound: number;
      /** @default <integer> */
      totalSecretCount: number;
      /** @default <integer> */
      price: number;
      /** @default <string> */
      prevSecretCmsId: string;
      /** @default <string> */
      prevSecretTitle: string;
      /** @default <string> */
      nextSecretCmsId: string;
      /** @default <string> */
      nextSecretTitle: string;
      /** @default <boolean> */
      hasAuthority: boolean;
      /**
       * Format: double
       * @default <double>
       */
      fontSize: number;
      /**
       * Format: double
       * @default <double>
       */
      lineHeight: number;
      membershipIntroduction?:
        | components["schemas"]["MembershipIntroductionDto"]
        | null;
      /** @default <string> */
      mediaConvertUrl: string;
      /** @default <string> */
      thumbnailUrl: string;
      /** @default <string> */
      cookie: string;
      /** @default <string> */
      masterDetailKeyCareer: string;
    };
    MostViewedContentsResponse: {
      /** @description 컨텐츠 리스트 */
      contents: components["schemas"]["MostViewedContent"][];
    };
    JoinRecommendationContentsResponse: {
      /** @description 컨텐츠 리스트 */
      contents: components["schemas"]["PickMetadataContent"][];
    };
    PickContentsResponse: {
      contents: components["schemas"]["PickMetadataContent"][];
    };
    PickContentResponse: {
      content: components["schemas"]["PickDetailMetaDataContent"];
    };
    SecretContentsResponse: {
      contents: components["schemas"]["SecretMetadataContent"][];
    };
    SecretContentResponse: {
      content: components["schemas"]["SecretDetailMetadataContent"];
    };
    SecretContentV2Response: {
      content: components["schemas"]["SecretDetailMetadataContentV2"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    COMMENT_ORDER_TYPE: "latest" | "like";
    ContentCommentsResponse: {
      comments: components["schemas"]["ContentCommentData"][];
    };
    ContentCommentsResponseV2: {
      comments: components["schemas"]["ContentCommentData"][];
      pagination: components["schemas"]["Pagination"];
    };
    CommentCountResponse: {
      /** @default <integer> */
      commentCount: number;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    SECRET_ORDER_TYPE: "ROUND" | "LATEST";
    SeriesSecretContentsResponse: {
      contents: components["schemas"]["SeriesSecretMetadataContent"][];
    };
    SeriesContentResponse: {
      content: components["schemas"]["SeriesDetailMetadataContent"];
    };
    ContentScheduleMetaData: {
      /** @default <string> */
      masterName: string;
      /**
       * Format: url
       * @default <url>
       */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      title: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      scheduledAt: string;
      /** @default <string> */
      seriesTitle: string;
      /** @default <string> */
      seriesCmsId: string;
    };
    UserCommentData: {
      /** @default <string> */
      commentId: string;
      /** @default <string> */
      parentCommentId: string;
      /** @default <string> */
      userId: string;
      /** @default <string> */
      comment: string;
      /** @default <integer> */
      likeCount: number;
      /** @default <integer> */
      childCommentCount: number;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /** @default <string> */
      contentCmsId: string;
      contentCmsType: components["schemas"]["COMMENT_CONTENT_TYPE"];
      /** @default <string> */
      title: string;
      /** @default <string> */
      seriesTitle: string;
      /** @default <boolean> */
      isMeLike: boolean;
      /** @default <boolean> */
      isMasterLike: boolean;
      /** @default <boolean> */
      isMasterComment: boolean;
      /** @default <boolean> */
      isRepliedMasterComment: boolean;
      /** @default <boolean> */
      isMeComment: boolean;
      /** @default <string> */
      masterName: string;
      /**
       * Format: url
       * @default <url>
       */
      masterPortraitUrl: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    CommentContentType: "pick" | "secret" | "live" | "poll" | "unknown";
    UserAlarmHistory: {
      /** @default <string> */
      id: string;
      /** @default <string> */
      notificationType: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      receivedAt: string;
      /** @default <string> */
      title: string;
      /** @default <string> */
      body: string;
      /** @default <string> */
      path: string;
      /** @default <boolean> */
      didRead: boolean;
      /** @default <string> */
      link: string;
      commentContentType?: components["schemas"]["CommentContentType"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ASSET_TYPE: "CHARGED" | "USED" | "REWARD" | "AVAILABLE";
    MyAssetMetadata: {
      type: components["schemas"]["ASSET_TYPE"];
      /** @default <integer> */
      balance: number;
      /** @default <string> */
      secretTitle: string;
      /** @default <integer> */
      secretRound: number;
      /** @default <string> */
      secretCmsId: string;
      /** @default <string> */
      seriesTitle: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
    };
    MyAssetBalanceMetadata: {
      type: components["schemas"]["ASSET_TYPE"];
      /** @default <integer> */
      balance: number;
    };
    FollowedMaster: {
      /** @default <string> */
      cmsId: string;
      /** @default <string> */
      name: string;
      /**
       * Format: url
       * @default <url>
       */
      profileImage: string;
      /** @default <string> */
      id: string;
    };
    FollowedMastersContentsResponse: {
      contents: (
        | components["schemas"]["PickMetadataContent"]
        | components["schemas"]["SecretMetadataContent"]
      )[];
      pagination: components["schemas"]["Pagination"];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    MY_PRODUCT_STATUS: "active" | "inactive";
    /**
     * @default <string>
     * @enum {string}
     */
    BANNER_TYPE: "BANNER";
    /**
     * @default <string>
     * @enum {string}
     */
    MY_PRODUCT_TYPE: "membership";
    /**
     * @default <string>
     * @enum {string}
     */
    STATE_ENUM:
      | "unknown"
      | "purchased_success"
      | "purchased_fail"
      | "purchased_refund"
      | "subscription_expired"
      | "subscription_cancelled"
      | "subscription_cancel_withdraw"
      | "subscription_changed"
      | "subscription_renewed"
      | "waiting_for_deposit"
      | "paymentmethod_change";
    MyProductMetadata: {
      /** @default <string> */
      myProductId: string;
      type: components["schemas"]["MY_PRODUCT_TYPE"];
      status: components["schemas"]["MY_PRODUCT_STATUS"];
      paymentState: components["schemas"]["STATE_ENUM"];
      /** @default <string> */
      productId: string;
      /** @default <string> */
      productName: string;
      /** @default <string> */
      productDisplayName: string;
      /** @default <string> */
      productDisplayMasterName: string;
      /** @default <string> */
      paymentMethod: string;
      /** @default <string> */
      paymentMethodProvider: string;
      /** @default <string> */
      paymentMethodInfo: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      expiredAt: string;
      /** @default <integer> */
      gracePeriod: number;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterName: string;
      /** @default <boolean> */
      isUnChangeable: boolean;
    };
    PurchasedSecretMetaData: {
      /** @default <string> */
      cmsId: string;
      cmsType: components["schemas"]["CMS_TYPE"];
      /**
       * Format: date-time
       * @default <dateTime>
       */
      publishedAt: string;
      /** @default <string> */
      masterName: string;
      /** @default <string> */
      masterPortraitUrl: string;
      /** @default <string> */
      masterCmsId: string;
      /** @default <string> */
      masterCompanyFullName: string;
      /** @default <string> */
      masterCompanyShortName: string;
      /** @default <string> */
      masterCompanyIconUrl: string;
      /** @default <string> */
      seriesTitle: string;
      /** @default <integer> */
      secretRound: number;
      /** @default <string> */
      secretTitle: string;
      /**
       * Format: url
       * @default <url>
       */
      thumbnailUrl: string;
      /** @default <string> */
      seriesCmsId: string;
      secretType: components["schemas"]["SECRET_TYPE"];
      /** @default <string> */
      summary: string;
      pickedCounts: components["schemas"]["PickedCounts"][];
      /** @default <boolean> */
      isNew: boolean;
      /** @default <integer> */
      commentCount: number;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      purchasedAt: string;
    };
    MyProductsResponse: {
      myProduct: components["schemas"]["MyProductMetadata"][];
    };
    ContentSchedulesResponse: {
      contentSchedules: components["schemas"]["ContentScheduleMetaData"][];
    };
    ScrappedContentsResponse: {
      contents: (
        | components["schemas"]["PickMetadataContent"]
        | components["schemas"]["SecretMetadataContent"]
        | components["schemas"]["SeriesMetadataContent"]
      )[];
    };
    UserCommentsResponse: {
      comments: components["schemas"]["UserCommentData"][];
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ALARM_HISTORY_FILTER: "UNREAD" | "ALL";
    AlarmHistoryResponse: {
      alarmHistory: components["schemas"]["UserAlarmHistory"][];
    };
    MyAssetsResponse: {
      myAssets: components["schemas"]["MyAssetMetadata"][];
    };
    MyAssetBalanceResponse: {
      balances: components["schemas"]["MyAssetBalanceMetadata"][];
    };
    PurchasedContentsResponse: {
      contents: components["schemas"]["PurchasedSecretMetaData"][];
    };
    FollowedMasterResponse: {
      masters: components["schemas"]["FollowedMaster"][];
      pagination: components["schemas"]["Pagination"];
    };
    NoticeMetadata: {
      /** @default <string> */
      cmsId: string;
      /** @default <string> */
      title: string;
      /** @default <string> */
      creator: string;
      /** @default <string> */
      createdAt: string;
      /** @default <boolean> */
      isRead: boolean;
    };
    NoticesResponse: {
      notices: components["schemas"]["NoticeMetadata"][];
    };
    AuthPushTopicsResponse: {
      name: components["schemas"]["PushTopicType"];
      /** @default <boolean> */
      isSubscribed: boolean;
      /** @default <string> */
      _id: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      updatedAt: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    ProviderType: "direct" | "apple" | "google" | "naver" | "kakao";
    /**
     * @default <string>
     * @enum {string}
     */
    SignPathType: "IOS" | "ANDROID" | "WEB" | "UNKNOWN";
    AuthWebSignUpUserResponse: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderType"];
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
       * @default <string>
       */
      password: string;
      /**
       * Format: url
       * @description 업로드 한 유저의 프로필 URL
       * @default <url>
       */
      portraitURL: string;
      /**
       * @description 닉네임
       * @default <string>
       */
      nickName: string;
      /** @default <string> */
      phoneNumber: string;
      pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
      /**
       * @description DB Id
       * @default <string>
       */
      id: string;
      signPath: components["schemas"]["SignPathType"];
    };
    AuthTokenResponse: {
      /**
       * @description Token
       * @default <string>
       */
      token: string;
      /**
       * Format: date-time
       * @description Token 만료시간
       * @default <dateTime>
       */
      expires: string;
    };
    AuthSignUpTokenResponse: {
      access: components["schemas"]["AuthTokenResponse"];
      refresh: components["schemas"]["AuthTokenResponse"];
    };
    AuthWebSignUpResponse: {
      user: components["schemas"]["AuthWebSignUpUserResponse"];
      tokens: components["schemas"]["AuthSignUpTokenResponse"];
      /**
       * @description Should recommendation
       * @default <boolean>
       */
      shouldRecommendation: boolean;
    };
    AuthWebSignUpRequestBody: {
      /**
       * @description subId and provider must be unique
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /**
       * @description must be unique
       * @default <string>
       */
      nickName: string;
      /**
       * Format: url
       * @default <url>
       */
      portraitURL: string;
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
       * @default <string>
       */
      password: string;
      /**
       * @description 전화번호, provider 가 direct 일 경우 subId 와 같은 값 (유효성을 보장하지 않음)
       * @default <string>
       */
      phoneNumber: string;
      /**
       * @description 마켓팅 수신 동의 여부
       * @default <boolean>
       */
      marketingAgree: boolean;
      signPath: components["schemas"]["SignPathType"];
    };
    /**
     * @default USER
     * @enum {string}
     */
    UserRoleName:
      | "USER"
      | "ADMIN"
      | "MASTER"
      | "MONITOR"
      | "MASTER_ADMIN"
      | "MASTER_MONITOR";
    AuthAppSignUpUserResponse: {
      /**
       * @default <string>
       * @example google_subId_test
       */
      subId: string;
      provider: components["schemas"]["ProviderType"];
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
       */
      portraitUrl: string;
      /**
       * @default <string>
       * @example 행복한 투자자
       */
      nickName: string;
      /**
       * @default <string>
       * @example 01033334444
       */
      phoneNumber: string;
      /**
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * Format: email
       * @default <email>
       * @example test@gmail.com
       */
      email: string;
      /** @default <integer> */
      currentAsset: number;
      role: components["schemas"]["UserRoleDto"];
      /**
       * @description 튜토리얼 완료 여부
       * @default false
       */
      isFinishedTUT: boolean;
      userRole: components["schemas"]["UserRoleName"];
    };
    AuthAppSignUpResponse: {
      user: components["schemas"]["AuthAppSignUpUserResponse"];
      tokens: components["schemas"]["AuthSignUpTokenResponse"];
      /**
       * @description Should recommendation
       * @default <boolean>
       */
      shouldRecommendation: boolean;
      /** @default <string> */
      password: string;
      pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
    };
    AuthAppSignUpRequestBody: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      /**
       * @description 닉네임
       * @default <string>
       */
      nickName: string;
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
       * @default <string>
       */
      password: string;
      /** @default <string> */
      phoneNumber: string;
      deviceType: components["schemas"]["DeviceTypeDto"];
      /**
       * @description 디바이스 모델
       * @default <string>
       * @example Iphone 12 Pro Max
       */
      deviceModel: string;
      /**
       * @description 디바이스 토큰
       * @default <string>
       */
      deviceToken: string;
      /**
       * @description 마켓팅 수신 동의 여부
       * @default <boolean>
       */
      isMarketingAgreed: boolean;
      /**
       * @description 야간 마켓팅 수신 동의 여부, 앱 요청으로 값만 추가 저장 X 사용 X
       * @default <boolean>
       */
      isNightMarketingAgreed: boolean;
      permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
      /**
       * @description 디바이스 아이디
       * @default <string>
       */
      deviceId: string;
      /** @default <binary> */
      portraitImage: string;
    };
    AuthPostDeviceResponse: {
      /** @description 디바이스 모델 */
      pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
      /**
       * @description 삭제 여부
       * @default <boolean>
       */
      deleted: boolean;
      /**
       * @description 디바이스 모델
       * @default <string>
       */
      deviceModel: string;
      /**
       * @description 유저 아이디
       * @default <string>
       */
      userId: string;
      /**
       * @description 국가
       * @default <string>
       */
      country: string;
      /**
       * @description 언어
       * @default <string>
       */
      language: string;
      /** @default <integer> */
      timezone: number;
      deviceType: components["schemas"]["DeviceTypeDto"];
      /**
       * @description FCM 토큰
       * @default <string>
       */
      deviceToken: string;
      /**
       * @description device의 아이디
       * @default <string>
       */
      id: string;
    };
    AuthPostDeviceRequestBody: {
      deviceType: components["schemas"]["DeviceTypeDto"];
      /**
       * @description FCM 토큰
       * @default <string>
       */
      deviceToken: string;
      /**
       * @description 디바이스 모델
       * @default <string>
       */
      deviceModel: string;
      /**
       * @description 기기 고유 번호
       * @default <string>
       */
      deviceId: string;
      permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
    };
    SwaggerUnAuthorizeException: {
      /** @default 401 */
      code: number;
      /** @default <string> */
      message: string;
    };
    AuthRefreshTokenRequestBody: {
      /**
       * @description refresh token
       * @default <string>
       */
      refreshToken: string;
    };
    SwaggerBadRequestException: {
      /** @default 400 */
      code: number;
      /** @default <string> */
      message: string;
    };
    AuthDirectLoginResponse: {
      user: components["schemas"]["AuthAppSignUpUserResponse"];
      /**
       * @description 인증 성공 여부
       * @default <boolean>
       */
      auth: boolean;
      /**
       * @description 가입 여부
       * @default <boolean>
       */
      join: boolean;
      /**
       * @description subId (가입이 되어 있는 경우 subId 를 보내준다.)
       * @default <string>
       */
      subId: string;
      /**
       * @description accessToken
       * @default <string>
       */
      accessToken: string;
      /**
       * Format: date-time
       * @description accessExpires
       * @default <dateTime>
       */
      accessExpires: string;
      /**
       * @description refreshToken
       * @default <string>
       */
      refreshToken: string;
      /**
       * Format: date-time
       * @description refreshExpires
       * @default <dateTime>
       */
      refreshExpires: string;
      /**
       * @description Should recommendation
       * @default <boolean>
       */
      shouldRecommendation: boolean;
    };
    AuthDirectLoginRequestBody: {
      /**
       * @description subId and provider must be unique
       * @default <string>
       */
      subId: string;
      /**
       * Format: password
       * @default <password>
       */
      password: string;
    };
    AuthValidateAccessTokenResponse: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
       * @default <string>
       */
      password: string;
      /**
       * Format: url
       * @description 업로드 한 유저의 프로필 URL
       * @default <url>
       */
      portraitURL: string;
      /**
       * @description 닉네임
       * @default <string>
       */
      nickName: string;
      /** @default <string> */
      phoneNumber: string;
      pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
      /**
       * @description DataBase에 저장된 회원의 id
       * @default <string>
       */
      id: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    MarketingAgreeTypeDto:
      | "isMarketingAgreed"
      | "isNightMarketingAgreed"
      | "all";
    AuthPatchMarketingAgreeResponse: {
      name: components["schemas"]["MarketingAgreeTypeDto"];
      /**
       * @description 동의 여부
       * @default <boolean>
       */
      value: boolean;
      /**
       * Format: date-time
       * @description 생성일
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 수정일
       * @default <dateTime>
       */
      updatedAt: string;
    };
    AuthPatchMarketingAgreeRequestBody: {
      name: components["schemas"]["MarketingAgreeTypeDto"];
      /**
       * @description 동의 여부
       * @default <boolean>
       */
      value: boolean;
      /**
       * Format: date-time
       * @description 생성일
       * @default <dateTime>
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description 수정일
       * @default <dateTime>
       */
      updatedAt: string;
    };
    AuthGetMyInfoResponse: {
      provider: components["schemas"]["LOGIN_TYPE"];
      /**
       * @default <string>
       * @example google_subId_test
       */
      subId: string;
      /**
       * @default <string>
       * @example 1
       */
      id: string;
      /**
       * @default <string>
       * @example 행복한 투자자
       */
      nickName: string;
      /**
       * Format: url
       * @default <url>
       * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
       */
      portraitUrl: string;
      /**
       * @default <string>
       * @example 01033334444
       */
      phoneNumber: string;
      /**
       * Format: email
       * @default <email>
       * @example test@gmail.com
       */
      email: string;
      /** @default <integer> */
      currentAsset: number;
      role: components["schemas"]["USER_ROLE"];
      /**
       * @description 튜토리얼 완료 여부
       * @default <boolean>
       */
      isFinishedTUT: boolean;
    };
    AuthValidateCodeResponse: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderTypeDto"];
      /** @default <integer> */
      code: number;
      /** @default <string> */
      phoneNumber: string;
      /**
       * Format: date-time
       * @default <dateTime>
       */
      expires: string;
      /** @default <string> */
      id: string;
    };
    AuthValidateAuthCodeRequestBody: {
      /**
       * @description 핸드폰 번호를 숫자만 입력해주세요
       * @default <string>
       */
      phoneNumber: string;
      /** @default <integer> */
      code: number;
      provider: components["schemas"]["ProviderTypeDto"];
    };
    AuthSendCodeRequestBody: {
      /**
       * @description 유저 subId
       * @default <string>
       */
      subId: string;
      type: components["schemas"]["AuthCodeTypeV2Dto"];
      /**
       * @description 핸드폰 번호를 숫자만 입력해주세요
       * @default <string>
       */
      phoneNumber: string;
      provider: components["schemas"]["ProviderTypeDto"];
    };
    AuthCheckPasswordRequestBody: {
      /**
       * @description 회원가입 시 subId
       * @default <string>
       */
      subId: string;
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
       * @default <string>
       */
      password: string;
    };
    AuthResetPasswordResponse: {
      /**
       * @description 회원가입 시 입력한 아이디
       * @default <string>
       */
      subId: string;
      provider: components["schemas"]["ProviderType"];
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
       * @default <string>
       */
      password: string;
      /**
       * Format: url
       * @description 업로드 한 유저의 프로필 URL
       * @default <url>
       */
      portraitURL: string;
      /**
       * @description 닉네임
       * @default <string>
       */
      nickName: string;
      /** @default <string> */
      phoneNumber: string;
      pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
      /**
       * @description 이전 회차 id, 없으면 null
       * @default <string>
       */
      id: string;
    };
    AuthResetPasswordRequestBody: {
      /**
       * @description 회원가입 시 subId
       * @default <string>
       */
      subId: string;
      /**
       * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
       * @default <string>
       */
      password: string;
    };
    AuthDuplicateUserResponse: {
      /**
       * @description 전화번호
       * @default <string>
       */
      phoneNumber: string;
      /**
       * @description 가입날짜
       * @default <string>
       */
      joinDate: string;
      /**
       * @description 별칭
       * @default <string>
       */
      nickName: string;
      provider: components["schemas"]["ProviderTypeDto"];
    };
    AuthCheckDuplicatePhoneResponse: {
      /**
       * @description 전화번호 중복 여부
       * @default <boolean>
       */
      isDuplicate: boolean;
      /** @description 중복된 유저 정보 배열 */
      users?: components["schemas"]["AuthDuplicateUserResponse"][] | null;
    };
    AuthCheckDuplicatePhoneRequestBody: {
      /**
       * @description 전화번호
       * @default <string>
       */
      phoneNumber: string;
    };
    /**
     * @default <string>
     * @enum {string}
     */
    FAQ_TYPE: "USER" | "SERVICE" | "PAYMENT";
    FAQData: {
      /** @default <string> */
      id: string;
      /** @default <string> */
      cmsId: string;
      type: components["schemas"]["FAQ_TYPE"];
      /** @default <string> */
      title: string;
      /** @default <string> */
      description: string;
    };
    FaqResponse: {
      faqs: components["schemas"]["FAQData"][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  updateMyPickByPickIdV2: {
    parameters: {
      query: {
        isPicked: boolean;
        selectedPickType: components["schemas"]["PickCountType"];
        contentType: components["schemas"]["ContentTypeDto"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        pickId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Pick Id
             * @default <string>
             */
            pickId: string;
            /**
             * @description Pick 여부
             * @default <boolean>
             */
            isPicked: boolean;
            selectedPickType?: components["schemas"]["PickCountType"];
            contentType: components["schemas"]["ContentTypeDto"];
          };
        };
      };
    };
  };
  updateScrapByContentId: {
    parameters: {
      query: {
        isScraped: boolean;
      };
      header?: {
        authorization?: string;
      };
      path: {
        contentId: string;
        contentType: components["schemas"]["ScrapTypeDto"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Scrap Contents Id
             * @default <string>
             */
            content: string;
            contentType: components["schemas"]["ScrapTypeDto"];
            /**
             * @description Scrap 여부
             * @default <boolean>
             */
            isScraped: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMyFollows: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FollowDto"][];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  updateFollowByMasterId: {
    parameters: {
      query: {
        isFollowed: boolean;
      };
      header?: {
        authorization?: string;
      };
      path: {
        masterId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Follow Master Id
             * @default <string>
             */
            followed: string;
            /**
             * @description Follow 여부
             * @default <boolean>
             */
            isFollowed: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  updateFollow: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          follow: components["schemas"]["UpdateFollow"][];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 정렬 순서 */
            follows: components["schemas"]["UpdateFollowResponseDto"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  patchProfileEditScreen: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * Format: binary
           * @default <binary>
           */
          portraitImage?: string;
          /** @default <string> */
          nickName?: string;
          /** @default <string> */
          password?: string;
          /** @default <string> */
          phoneNumber?: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
             */
            portraitUrl: string;
            /**
             * @default <string>
             * @example 행복한 투자자
             */
            nickName: string;
            /**
             * @default <string>
             * @example 01033334444
             */
            phoneNumber: string;
            /**
             * Format: email
             * @description 없으면 빈 문자열
             * @default <email>
             */
            email: string;
            LoginTypeDto: components["schemas"]["LoginTypeDto"];
            /**
             * @description 휴대폰 등록 여부
             * @default <boolean>
             */
            addPhoneNumber: boolean;
          };
        };
      };
    };
  };
  patchIsReadTUT: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 변경 후 isFinishedTUT의 값
           * @default <boolean>
           */
          isFinishedTUT: boolean;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 변경 후 isFinishedTUT의 값
             * @default <boolean>
             */
            isFinishedTUT: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  patchIsReadByMasterNotice: {
    parameters: {
      query: {
        isRead: boolean;
        masterId: string;
      };
      header?: {
        authorization?: string;
      };
      path: {
        noticeId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 변경 후 isFinishedTUT의 값 */
            masterNoticeHistory: components["schemas"]["PatchIsReadByMasterNoticeDto"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  patchReadPush: {
    parameters: {
      query: {
        isRead: boolean;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description 알림 오브젝트 아이디를 배열로 */
          historyId: string[];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 알람내역 */
            alarmHistory: components["schemas"]["AlarmHistoryDto"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  patchReadNotice: {
    parameters: {
      query: {
        isRead: boolean;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description 공지사항 아이디를 배열로 */
          noticeId: string[];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 알람내역 */
            noticeHistory: components["schemas"]["NoticeHistoryDto"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  patchFormattingStyle: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * Format: double
           * @default <double>
           */
          fontSize: number;
          /**
           * Format: double
           * @default <double>
           */
          lineHeight: number;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: double
             * @default <double>
             */
            fontSize: number;
            /**
             * Format: double
             * @default <double>
             */
            lineHeight: number;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  patchClubLetterByReadValue: {
    parameters: {
      query: {
        isRead: boolean;
      };
      header?: {
        authorization?: string;
      };
      path: {
        masterId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            clubLetterHistory: components["schemas"]["PatchClubLetterByReadValue"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getPickScreenByIdV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            pickCounts: components["schemas"]["PickCountDto"][];
            selectedPickType?: components["schemas"]["PickCountType"];
            /**
             * @default <boolean>
             * @example true
             */
            isUserPicked: boolean;
            /**
             * @description 픽이 스크랩 되었는지 여부
             * @default <boolean>
             * @example true
             */
            isScraped: boolean;
            /**
             * @description 권한 여부
             * @default <boolean>
             */
            hasAuthority: boolean;
            type: components["schemas"]["PickTypeDto"];
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile01.png
             */
            masterPortraitUrl: string;
            /**
             * @default <string>
             * @example 미주부
             */
            masterName: string;
            /**
             * Format: date-time
             * @default <dateTime>
             * @example 2023-03-31T08:43:15.420Z
             */
            createdAt: string;
            /**
             * @default <string>
             * @example 미래 나노텍, 리튬 가격 50% 인상 전망에 주가 급등
             */
            title: string;
            /**
             * Format: url
             * @description 픽의 상세 페이지 URL desc와 같은 내용을 담고 있다.
             * @default <url>
             * @example https://master.d3p3hqflqwi88c.amplifyapp.com/content?id=6&content_type=picks
             */
            contentUrl: string;
            outboundLink?:
              | components["schemas"]["OutboundLinkCardDto"][]
              | null;
            stocks: components["schemas"]["FinanceCardModel"][];
            /**
             * Format: url
             * @default <url>
             */
            imageUrl: string;
            /**
             * Format: url
             * @default <url>
             */
            html: string;
            pdfUrl?: components["schemas"]["PDFData"][] | null;
            /** @default <string> */
            masterCompanyFullName: string;
            /** @default <string> */
            masterCompanyShortName: string;
            /** @default <string> */
            masterCompanyIconURL: string;
            /**
             * @default <string>
             * @example 미주부
             */
            masterCmsId: string;
            /**
             * @default <string>
             * @example 미주부
             */
            masterDetailKeyCareer: string;
            /**
             * Format: url
             * @default <url>
             */
            webImageUrl: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getPicksMetaPageV4: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            poll: components["schemas"]["PollCardModel"];
            stocks: components["schemas"]["FinanceCardModel"][];
            /** @default <boolean> */
            hasNew: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getFeedMetaPageV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            masters: components["schemas"]["MasterCardModelV2"][];
            banners: components["schemas"]["FeedBannerModel"][];
            /** @default <boolean> */
            hasNew: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getFeedMetaPageV4: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            masters: components["schemas"]["MasterCardModelV2"][];
            banners: components["schemas"]["FeedBannerModel"][];
            /** @default <boolean> */
            hasNew: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getClubMetaPageV3: {
    parameters: {
      query?: {
        /** @description 아무것도 없을 경우 기본값은 all 입니다. */
        type?: components["schemas"]["ClubScreenTypeDto"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @default <string>
             * @example 김영익
             */
            name: string;
            /**
             * @default <integer>
             * @example 1357
             */
            followers: number;
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/ClubPageProfile.png
             */
            clubOfficialImage: string;
            /**
             * Format: url
             * @default <url>
             */
            clubTextImage: string;
            /** @default <string> */
            clubLetter: string;
            userTierType: components["schemas"]["UserTierTypeDto"];
            accessState: components["schemas"]["MasterAccessStateDto"];
            /** @default <integer> */
            secretCount: number;
            /** @default <integer> */
            seriesCount: number;
            /** @default <boolean> */
            didReadLetter: boolean;
            /** @default <boolean> */
            hasNew: boolean;
            membershipIntroduction?: components["schemas"]["MembershipIntroductionDto"];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getClubScreenDetailById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description master id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공여부 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 마스터 성함
             * @default <string>
             */
            name: string;
            /**
             * @description 마스터 디테일 소개
             * @default <string>
             */
            masterDetailIntroduction: string;
            /**
             * @description 마스터 디테일 제목
             * @default <string>
             */
            masterDetailKeyCareer: string;
            /**
             * @description 마스터 디테일, 추천 인사말
             * @default <string>
             */
            description: string;
            /**
             * @description 마스터 기부 금액
             * @default <string>
             */
            cumulativeDonation: string;
            /** @description 마스터 이력 */
            masterDetailCareers: components["schemas"]["CareerData"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getClubNoticesV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        /** @description master id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공여부 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 클럽 공지사항 리스트 */
            notices: components["schemas"]["getClubNoticesV2Dto"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getClubNoticeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description notice id */
        noticeId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공여부 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 클럽공지사항 아이디
             * @default <string>
             */
            id: string;
            /**
             * @description 클럽 공지사항 제목
             * @default <string>
             */
            title: string;
            /**
             * @description 클럽 공지사항 설명
             * @default <string>
             */
            description: string;
            /**
             * Format: date-time
             * @description 작성 날짜 및 시간
             * @default <dateTime>
             */
            createdAt: string;
            /**
             * @description 작성자
             * @default <string>
             */
            creator: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getIndexesScreen: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            indexes: components["schemas"]["IndexListTileModel"][];
          };
        };
      };
    };
  };
  getCommentsByCommentId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comment: components["schemas"]["ContentCommentData"];
          };
        };
      };
    };
  };
  getChildCommentsByParentCommentId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comments: components["schemas"]["ContentCommentData"][];
          };
        };
      };
    };
  };
  postCommentV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @default <string> */
          contentCmsId: string;
          contentType: components["schemas"]["CMS_TYPE"];
          /** @default <string> */
          value: string;
          /** @default <string> */
          parentCommentId?: string;
        };
      };
    };
    responses: {
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comment: components["schemas"]["CommentIdData"];
          };
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  updateCommentByCommentIdV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @default <string> */
          value: string;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comment: components["schemas"]["CommentIdData"];
          };
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  deleteCommentByCommentIdV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  createReportByCommentId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comment: components["schemas"]["CommentIdData"];
          };
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Conflict */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  upsertLikeByCommentId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @default <boolean> */
          isLike: boolean;
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comment: components["schemas"]["CommentIdData"];
          };
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMasterByCommentId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        commentId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            master: components["schemas"]["Master"];
          };
        };
      };
    };
  };
  getMeScreenV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @default <string>
             * @example 행복한 투자자
             */
            name: string;
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator01.png
             */
            portraitUrl: string;
            usGauge: components["schemas"]["UserLevelTypeDto"];
            /**
             * @default <integer>
             * @example 7
             */
            followingCount: number;
            /**
             * @default <integer>
             * @example 7
             */
            assetCount: number;
            /**
             * @description 읽은 컨텐츠 갯수
             * @default <integer>
             * @example 51
             */
            readContentCount: number;
            /** @description UsGaugeType 달성 기준에 대한 checkPoints - [achievement] 가 100 일 때 [checkPoints] 는 최소 값과 최대 값을 뺀 [25, 50, 75] 가 된다. */
            checkPoints: number[];
            /**
             * Format: double
             * @description UsGaugeType 에 유저 따른 달성률
             * @default <double>
             */
            achievementRate: number;
            interestType: components["schemas"]["InterestType"];
            /**
             * @description 가입한 맴버십 갯수
             * @default <integer>
             * @example 13
             */
            membershipCount: number;
            /**
             * @description 스크랩 갯수
             * @default <integer>
             */
            scrapCount: number;
            /**
             * @description 댓글 갯수
             * @default <integer>
             */
            commentCount: number;
            /**
             * @description 유저가 구매한 갯수
             * @default <integer>
             */
            purchasedContentCount: number;
            /**
             * @description 유저가 놓친 고객센터 갯수, 프론트에서 처리하기에 항상 0 고정
             * @default <integer>
             */
            unreadHelpdeskCount: number;
            /**
             * @description 유저가 놓친 공지사항 갯수, 프론트에서 처리하기에 항상 0 고정
             * @default <integer>
             */
            unreadNotificationCount: number;
          };
        };
      };
    };
  };
  getSettingsScreenV2: {
    parameters: {
      query: {
        deviceToken: string;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            loginType: components["schemas"]["LoginTypeDto"];
            /**
             * @description email or phoneNumber
             * @default <string>
             * @example email
             */
            userId: string;
            /** @default false */
            didEventNotificationAgree: boolean;
            /** @default false */
            didMasterNotificationAgree: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMyMembershipScreenV3: {
    parameters: {
      query: {
        status: components["schemas"]["MembershipStatusDto"];
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            memberships: components["schemas"]["MyMembershipCardModel"][];
          };
        };
      };
    };
  };
  getMyMembershipScreenV4: {
    parameters: {
      query: {
        status: components["schemas"]["MembershipStatusDto"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            memberships: components["schemas"]["MyMembershipCardModelV3"][];
          };
        };
      };
    };
  };
  getMyMembershipDetailScreen: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            membership: components["schemas"]["MyMembershipCardModel"];
            transcations: (
              | components["schemas"]["PurchaseSuccessCardModel"]
              | components["schemas"]["PurchaseFailCardModel"]
              | components["schemas"]["SubscriptionCancelCardModel"]
              | components["schemas"]["SubscriptionChangeCardModel"]
              | components["schemas"]["SubscriptionCancelWithdrawCardModel"]
            )[];
          };
        };
      };
    };
  };
  getMyMembershipPaymentMethodChange: {
    parameters: {
      query: {
        method: components["schemas"]["HectoMethodType"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 상점아이디
             * @default <string>
             */
            mchtId: string;
            method: components["schemas"]["HectoMethodType"];
            cardGb?: components["schemas"]["HectoCardGBType"];
            corpPayCode?: components["schemas"]["HectoCorpPayCodeType"];
            /**
             * @description 상점한글명
             * @default <string>
             */
            mchtName: string;
            /**
             * @description 상점영문명
             * @default <string>
             */
            mchtEName: string;
            /**
             * @description 결제 후 알림 전달되는 API URL
             * @default <string>
             */
            notiUrl: string;
            /**
             * @description 결제 후 성공 결과 전달되는 API URL
             * @default <string>
             */
            nextUrl: string;
            /**
             * @description 결제 후 취소 결과 전달되는 API URL
             * @default <string>
             */
            cancUrl: string;
            /**
             * @description 요청일자, yyyyMMdd, ex: 20211231
             * @default <string>
             */
            trdDt: string;
            /**
             * @description 요청시간, HH24MISS, ex: 100000
             * @default <string>
             */
            trdTm: string;
            /**
             * @description SHA256 방식으로 생성한 해쉬값, 호출 시점에 결정 됨
             * @default <string>
             */
            pktHash: string;
            product: components["schemas"]["membershipProductHectoModel"];
            paymentMethodChangeType: components["schemas"]["PaymentMethodChangeType"];
          };
        };
      };
    };
  };
  getMyMembershipCancelScreen: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            product: components["schemas"]["MembershipsProduct"];
            /**
             * @description 구독해지일 (YYYYMMDD)
             * @default <string>
             */
            expiredAt: string;
          };
        };
      };
    };
  };
  postMyMembershipCancel: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 구독해지일 (YYYYMMDD)
             * @default <string>
             */
            expiredAt: string;
            result: components["schemas"]["CancelResultDto"];
          };
        };
      };
    };
  };
  postMyMembershipRenew: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 구독해지일 (YYYYMMDD)
             * @default <string>
             */
            expiredAt: string;
            result: components["schemas"]["RenewResultDto"];
          };
        };
      };
    };
  };
  getMyMembershipChange: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        /** @description 멤버십 아이디 */
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 변경 가능한 리스트 목록 */
            memberships: components["schemas"]["membershipProductHectoChangeModel"][];
          };
        };
      };
    };
  };
  postMyMembershipChange: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        /** @description 멤버십 아이디 */
        membershipId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 변경 할 Product ID
           * @default <string>
           */
          productId: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 변경 될 구독해지일 (YYYYMMDD)
             * @default <string>
             */
            changedExpiredAt: string;
            result: components["schemas"]["RenewResultDto"];
          };
        };
      };
    };
  };
  getMyMastersScreenV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            masters: components["schemas"]["MasterCardModelV2"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getProfileEditScreen: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
             */
            portraitUrl: string;
            /**
             * @default <string>
             * @example 행복한 투자자
             */
            nickName: string;
            /**
             * @default <string>
             * @example 01033334444
             */
            phoneNumber: string;
            /**
             * Format: email
             * @description 없으면 빈 문자열
             * @default <email>
             */
            email: string;
            LoginTypeDto: components["schemas"]["LoginTypeDto"];
            /**
             * @description 휴대폰 등록 여부
             * @default <boolean>
             */
            addPhoneNumber: boolean;
          };
        };
      };
    };
  };
  postAssetsProducts: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 거래 토큰
           * @default <string>
           */
          transcationToken: string;
          product: components["schemas"]["AssetsProduct"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 거래 토큰
             * @default <string>
             */
            transcationToken: string;
            transcationState: components["schemas"]["TransactionStatus"];
            product: components["schemas"]["AssetsProduct"];
          };
        };
      };
    };
  };
  postMyContents: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description CMS Contents ID
           * @default <string>
           */
          contentId: string;
          contentType: components["schemas"]["MyContentType"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            content: components["schemas"]["MyContentDto"];
          };
        };
      };
    };
  };
  getRedDot: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data: components["schemas"]["GetRedDotResponseDto"];
          };
        };
      };
    };
  };
  getInterestRankDialogModel: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            ranks: components["schemas"]["InterestRankListTileModel"][];
          };
        };
      };
    };
  };
  getSecretScreenByIdV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        /** @description secretId */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description secretId
             * @default <string>
             * @example 1
             */
            secretId: string;
            /**
             * @description seriesId
             * @default <string>
             * @example 1
             */
            seriesId: string;
            type: components["schemas"]["SecretTypeDto"];
            /**
             * @default <string>
             * @example 강달러 고금리는 끝나는가?
             */
            title: string;
            /**
             * Format: url
             * @description type article is null
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/TestVideo.mp4
             */
            mediaUrl: string;
            /** @default <string> */
            html: string;
            /** @default <string> */
            previewHtml: string;
            /**
             * Format: url
             * @description type article and audio is null, 현재 Mock Data 사용 중
             * @default <url>
             */
            mediaThumbnailUrl: string;
            /**
             * Format: url
             * @description article URL
             * @default <url>
             * @example https://example.com
             */
            contentUrl: string;
            /**
             * @description 회차
             * @default <integer>
             * @example 1
             */
            episodeCount: number;
            /**
             * @description 총 회차, 상위 series items length 사용, 예약된 회차나 그런 의미가 아님
             * @default <integer>
             * @example 10
             */
            totalEpisodeCount: number;
            /**
             * Format: url
             * @description CDN URL
             * @default <url>
             */
            streamingURL: string;
            pdfUrl?: components["schemas"]["PDFData"][] | null;
            /**
             * @description 권한 여부
             * @default <boolean>
             * @example true
             */
            hasAuthority: boolean;
            /**
             * @description 유저 북마크 여부
             * @default <boolean>
             * @example true
             */
            isScraped: boolean;
            /**
             * @description 안 쓰는 값, 0으로 고정
             * @default <integer>
             * @example 100
             */
            commentCount: number;
            /**
             * @description 다음 회차 id, 없으면 null
             * @default <string>
             */
            nextId: string;
            /**
             * @description 이전 회차 id, 없으면 null
             * @default <string>
             */
            prevId: string;
            /**
             * @description cookie info
             * @default <string>
             */
            cookie: string;
            /**
             * @description 가격
             * @default <integer>
             */
            price: number;
            /**
             * @description 마스터 아이디
             * @default <string>
             */
            masterId: string;
            pickCounts: components["schemas"]["PickCountDto"][];
            selectedPickType?: components["schemas"]["PickCountType"];
            /**
             * @default <boolean>
             * @example true
             */
            isUserPicked: boolean;
            /**
             * Format: double
             * @default <double>
             */
            fontSize: number;
            /**
             * Format: double
             * @default <double>
             */
            lineHeight: number;
            /** @default <string> */
            masterCmsId: string;
            /** @default <string> */
            masterName: string;
            /** @default <string> */
            masterProfileImage: string;
            /**
             * @default <string>
             * @example 미주부
             */
            masterDetailKeyCareer: string;
            /** @default <boolean> */
            masterIsCommentBlock: boolean;
            /**
             * @description 권한 여부
             * @default <boolean>
             */
            webHasAuthority: boolean;
            /**
             * Format: date-time
             * @default <dateTime>
             */
            publishedAt: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getSeriesScreenByIdV4: {
    parameters: {
      query: {
        /** @description order */
        order?: components["schemas"]["SeriesScreenOrderDto"];
        /** @description 기본값 false */
        isRead?: boolean;
        offset: number;
        limit: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/secret_img.png
             */
            coverImageUrl: string;
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/feedProfile02.png
             */
            portraitUrl: string;
            /**
             * @default <string>
             * @example 김영익
             */
            name: string;
            /**
             * @default <string>
             * @example 클럽 아이디
             */
            creatorClubId: string;
            /**
             * @description 안 쓰이는 값
             * @default <integer>
             * @example 27877
             */
            rateCount: number;
            /**
             * @default <string>
             * @example 2023년 트렌드로 읽는 경제의 정석
             */
            title: string;
            /**
             * @default <string>
             * @example 더 많은 돈을 벌고 지키려면? 나의 재정 시스템을 점검하고 재정비하자! 원하는 만큼 부를 이룬 사람들의 재정 플랜과 여기서부터 짤립니다
             */
            desc: string;
            tierType?: components["schemas"]["UserTierTypeDto"];
            recommendationSeries?:
              | components["schemas"]["SeriesCardDto"][]
              | null;
            /**
             * @description 유저 북마크 여부
             * @default <boolean>
             * @example true
             */
            isScraped: boolean;
            /**
             * @description 안 읽은 시크릿 수
             * @default <integer>
             */
            hasUnReadCount: number;
            /**
             * @description 총 갯수
             * @default <integer>
             */
            totalCount: number;
            secrets: components["schemas"]["SecretBriefCardDtoV3"][];
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getHelpDeskScreenV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 읽지않은 공지사항 수
             * @default <integer>
             */
            noticeCount: number;
            /**
             * @description 카카오톡 오픈채팅 링크
             * @default <string>
             */
            kakaoOpenChat: string;
          };
        };
      };
    };
  };
  getNoticeScreenById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @default <string>
             * @example 김영익, 홍익희 마스터의 구독 가격 정책이 변경되었습니다.
             */
            title: string;
            /**
             * @default <string>
             * @example <특징테마> 2차전지는 큰 폭이 하락, 기존의 주도주가 무너지는 모습 반면 새로운 수급은 컨텐츠, 엔터, 화장품 등 중국 리오프닝 그 외에도 인터넷, 우크라재건, 일부 게임주 강세 반도체도 삼성전자 하이닉스 강세로 시장상승을 주도 <특징테마> 2차전지는 큰 폭이 하락, 기존의 주도주가 무너지는 모습 반면 새로운 수급은 컨텐츠, 엔터, 화장품 등 중국 리오프닝 그 외에도 인터넷, 우크라재건, 일부 게임주 강세 반도체도 삼성전자 하이닉스 강세로 시장상승을 주도 <특징테마> 2차전지는 큰 폭이 하락, 기존의 주도주가 무너지는 모습 반면 새로운 수급은 컨텐츠, 엔터, 화장품 등 중국 리오프닝 그 외에도 인터넷, 우크라재건, 일부 게임주 강세 반도체도 삼성전자 하이닉스 강세로 시장상승을 주도
             */
            desc: string;
            /**
             * Format: date-time
             * @default <dateTime>
             * @example 2023-03-07T08:43:15.420Z
             */
            createdAt: string;
            /**
             * @default <string>
             * @example 어스얼라이언스
             */
            creator: string;
          };
        };
      };
    };
  };
  getAssetProductsAndroid: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            products: components["schemas"]["AssetsProduct"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getAssetProductsIos: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            products: components["schemas"]["AssetsProduct"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMembershipProductsAndroid: {
    parameters: {
      query: {
        masterId: string;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 마스터 아이디 (내부 사용)
             * @default <string>
             */
            masterId: string;
            /**
             * @description 그룹 아이디 (구글, 애플에서 사용)
             * @default <string>
             */
            groupId: string;
            /**
             * @description 그룹명 (구글, 애플에서 사용)
             * @default <string>
             */
            groupName: string;
            products: components["schemas"]["MembershipsProduct"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMembershipProductsIosV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 마스터 아이디 (내부 사용)
             * @default <string>
             */
            masterId: string;
            /**
             * @description 그룹 아이디 (구글, 애플에서 사용)
             * @default <string>
             */
            groupId: string;
            /**
             * @description 그룹명 (구글, 애플에서 사용)
             * @default <string>
             */
            groupName: string;
            products: components["schemas"]["MembershipsProduct"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMembershipProductsHecto: {
    parameters: {
      query: {
        masterId: string;
        productGroupId: string;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description master cms id
             * @default <string>
             */
            masterId: string;
            /**
             * @description 상점아이디
             * @default <string>
             */
            mchtId: string;
            /**
             * @description 상점한글명
             * @default <string>
             */
            mchtName: string;
            /**
             * @description 상점영문명
             * @default <string>
             */
            mchtEName: string;
            products?: components["schemas"]["membershipProductHectoModel"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMembershipProductsHectoNoAuth: {
    parameters: {
      query: {
        masterId: string;
        productGroupId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description master cms id
             * @default <string>
             */
            masterId: string;
            /**
             * @description 상점아이디
             * @default <string>
             */
            mchtId: string;
            /**
             * @description 상점한글명
             * @default <string>
             */
            mchtName: string;
            /**
             * @description 상점영문명
             * @default <string>
             */
            mchtEName: string;
            products?: components["schemas"]["membershipProductHectoModel"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMembershipProductDetailHecto: {
    parameters: {
      query: {
        method: components["schemas"]["HectoMethodType"];
        cardGb: string;
        corpPayCode: string;
      };
      header?: {
        authorization?: string;
      };
      path: {
        mchtTrdNo: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 상점아이디
             * @default <string>
             */
            mchtId: string;
            method: components["schemas"]["HectoMethodType"];
            cardGb?: components["schemas"]["HectoCardGBType"];
            corpPayCode?: components["schemas"]["HectoCorpPayCodeType"];
            /**
             * @description 상점한글명
             * @default <string>
             */
            mchtName: string;
            /**
             * @description 상점영문명
             * @default <string>
             */
            mchtEName: string;
            /**
             * @description 결제 후 알림 전달되는 API URL
             * @default <string>
             */
            notiUrl: string;
            /**
             * @description 결제 후 성공 결과 전달되는 API URL
             * @default <string>
             */
            nextUrl: string;
            /**
             * @description 결제 후 취소 결과 전달되는 API URL
             * @default <string>
             */
            cancUrl: string;
            /**
             * @description 요청일자, yyyyMMdd, ex: 20211231
             * @default <string>
             */
            trdDt: string;
            /**
             * @description 요청시간, HH24MISS, ex: 100000
             * @default <string>
             */
            trdTm: string;
            /**
             * @description SHA256 방식으로 생성한 해쉬값, 호출 시점에 결정 됨
             * @default <string>
             */
            pktHash: string;
            product: components["schemas"]["membershipProductHectoModel"];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMyAuthV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            provider: components["schemas"]["LOGIN_TYPE"];
            /**
             * @default <string>
             * @example google_subId_test
             */
            subId: string;
            /**
             * @default <string>
             * @example 1
             */
            id: string;
            /**
             * @default <string>
             * @example 행복한 투자자
             */
            nickName: string;
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
             */
            portraitUrl: string;
            /**
             * @default <string>
             * @example 01033334444
             */
            phoneNumber: string;
            /**
             * Format: email
             * @default <email>
             * @example test@gmail.com
             */
            email: string;
            /** @default <integer> */
            currentAsset: number;
            role: components["schemas"]["USER_ROLE"];
            /**
             * @description 튜토리얼 완료 여부
             * @default <boolean>
             */
            isFinishedTUT: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMyAuth: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            provider: components["schemas"]["LoginTypeDto"];
            /**
             * @default <string>
             * @example google_subId_test
             */
            subId: string;
            /**
             * @default <string>
             * @example 1
             */
            id: string;
            /**
             * @default <string>
             * @example 행복한 투자자
             */
            nickName: string;
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
             */
            portraitUrl: string;
            /**
             * @default <string>
             * @example 01033334444
             */
            phoneNumber: string;
            /**
             * Format: email
             * @default <email>
             * @example test@gmail.com
             */
            email: string;
            /** @default <integer> */
            currentAsset: number;
            role: components["schemas"]["UserRoleDto"];
            /**
             * @description 튜토리얼 완료 여부
             * @default <boolean>
             */
            isFinishedTUT: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  postDeviceV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          deviceType: components["schemas"]["DeviceTypeDto"];
          /**
           * @description FCM 토큰
           * @default <string>
           */
          deviceToken: string;
          /**
           * @description 디바이스 모델
           * @default <string>
           */
          deviceModel: string;
          /**
           * @description 기기 고유 번호
           * @default <string>
           */
          deviceId: string;
          permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 유저 아이디
             * @default <string>
             */
            userId: string;
            /**
             * @description 국가
             * @default <string>
             */
            country: string;
            /**
             * @description 언어
             * @default <string>
             */
            language: string;
            /** @default <integer> */
            timezone: number;
            deviceType: components["schemas"]["DeviceTypeDto"];
            /**
             * @description FCM 토큰
             * @default <string>
             */
            deviceToken: string;
            /**
             * @description device의 아이디
             * @default <string>
             */
            id: string;
            /**
             * @description 디바이스 모델
             * @default <string>
             */
            deviceModel: string;
            /** @description 디바이스 모델 */
            pushTopics: components["schemas"]["PushTopicDto"][];
            /**
             * @description 삭제 여부
             * @default <boolean>
             */
            deleted: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  refreshTokens: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description refresh token
           * @default <string>
           */
          refreshToken: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            access: components["schemas"]["TokenDto"];
            refresh: components["schemas"]["TokenDto"];
          };
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  validateAccessToken: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderTypeDto"];
            /**
             * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
             * @default <string>
             */
            password: string;
            /**
             * Format: url
             * @description 업로드 한 유저의 프로필 URL
             * @default <url>
             */
            portraitURL: string;
            /**
             * @description 닉네임
             * @default <string>
             */
            nickName: string;
            /** @default <string> */
            phoneNumber: string;
            pushTopics: components["schemas"]["PushTopicDto"][];
            /**
             * @description DataBase에 저장된 회원의 id
             * @default <string>
             */
            id: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  validateAuthCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 핸드폰 번호를 숫자만 입력해주세요
           * @default <string>
           */
          phoneNumber: string;
          /** @default <integer> */
          code: number;
          provider: components["schemas"]["ProviderTypeDto"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderTypeDto"];
            /** @default <integer> */
            code: number;
            /** @default <string> */
            phoneNumber: string;
            /**
             * Format: date-time
             * @default <dateTime>
             */
            expires: string;
            /** @default <string> */
            id: string;
          };
        };
      };
      /** @description Bad Request */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  sendAuthCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 핸드폰 번호를 숫자만 입력해주세요
           * @default <string>
           */
          phoneNumber: string;
          type: components["schemas"]["AuthCodeTypeDto"];
          provider: components["schemas"]["ProviderTypeDto"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderTypeDto"];
            /** @default <string> */
            phoneNumber: string;
            /**
             * Format: date-time
             * @default <dateTime>
             */
            expires: string;
            /** @default <string> */
            id: string;
            /** @default <integer> */
            code: number;
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  sendAuthCodeV2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 핸드폰 번호를 숫자만 입력해주세요
           * @default <string>
           */
          phoneNumber: string;
          provider: components["schemas"]["ProviderTypeDto"];
          /**
           * @description 유저 subId
           * @default <string>
           */
          subId?: string;
          type: components["schemas"]["AuthCodeTypeV2Dto"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderTypeDto"];
            /** @default <string> */
            phoneNumber: string;
            /**
             * Format: date-time
             * @default <dateTime>
             */
            expires: string;
            /** @default <string> */
            id: string;
            /** @default <integer> */
            code: number;
          };
        };
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  directLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description subId and provider must be unique
           * @default <string>
           */
          subId: string;
          /**
           * Format: password
           * @default <password>
           */
          password: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 인증 성공 여부
             * @default <boolean>
             */
            auth: boolean;
            /**
             * @description 가입 여부
             * @default <boolean>
             */
            join: boolean;
            /**
             * @description subId (가입이 되어 있는 경우 subId 를 보내준다.)
             * @default <string>
             */
            subId: string;
            /**
             * @description accessToken
             * @default <string>
             */
            accessToken: string;
            /**
             * Format: date-time
             * @description accessExpires
             * @default <dateTime>
             */
            accessExpires: string;
            /**
             * @description refreshToken
             * @default <string>
             */
            refreshToken: string;
            /**
             * Format: date-time
             * @description refreshExpires
             * @default <dateTime>
             */
            refreshExpires: string;
            /** @default <boolean> */
            shouldRecommendation: boolean;
          };
        };
      };
      /** @description 비밀번호가 틀린 경우 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  directLoginV2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description subId and provider must be unique
           * @default <string>
           */
          subId: string;
          /**
           * Format: password
           * @default <password>
           */
          password: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 인증 성공 여부
             * @default <boolean>
             */
            auth: boolean;
            /**
             * @description 가입 여부
             * @default <boolean>
             */
            join: boolean;
            /**
             * @description subId (가입이 되어 있는 경우 subId 를 보내준다.)
             * @default <string>
             */
            subId: string;
            /**
             * @description accessToken
             * @default <string>
             */
            accessToken: string;
            /**
             * Format: date-time
             * @description accessExpires
             * @default <dateTime>
             */
            accessExpires: string;
            /**
             * @description refreshToken
             * @default <string>
             */
            refreshToken: string;
            /**
             * Format: date-time
             * @description refreshExpires
             * @default <dateTime>
             */
            refreshExpires: string;
            /** @default <boolean> */
            shouldRecommendation: boolean;
            user: components["schemas"]["getMyAuthDto"];
          };
        };
      };
      /** @description 비밀번호가 틀린 경우 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  phoneNumberCheckDuplication: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 전화번호
           * @default <string>
           */
          phoneNumber: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 전화번호 중복 여부
             * @default <boolean>
             */
            isDuplicate: boolean;
            /** @description 중복된 유저 정보 배열 */
            users?: components["schemas"]["DuplicateUser"][] | null;
          };
        };
      };
    };
  };
  googleAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      307: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  appleAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      307: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  naverAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      307: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  naverAuthWithNative: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          data: components["schemas"]["NaverAuthDto"];
        };
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            data?:
              | components["schemas"]["LoginSuccessDto"]
              | components["schemas"]["LoginNoJoinDto"];
          };
        };
      };
    };
  };
  kakaoAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      307: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  subscribedTopicV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          topic: components["schemas"]["PushTopicType"];
          /** @default <string> */
          deviceToken: string;
          deviceType: components["schemas"]["DeviceTypeDto"];
          permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
          /**
           * @description 디바이스 아이디
           * @default <string>
           */
          deviceId: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 이벤트 알림 동의 여부
             * @default false
             */
            didEventNotificationAgree: boolean;
            /**
             * @description 마스터 알림 동의 여부
             * @default false
             */
            didMasterNotificationAgree: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  unsubscribedTopicV3: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          topic: components["schemas"]["PushTopicType"];
          /** @default <string> */
          deviceToken: string;
          deviceType: components["schemas"]["DeviceTypeDto"];
          permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
          /**
           * @description 디바이스 아이디
           * @default <string>
           */
          deviceId: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 이벤트 알림 동의 여부
             * @default false
             */
            didEventNotificationAgree: boolean;
            /**
             * @description 마스터 알림 동의 여부
             * @default false
             */
            didMasterNotificationAgree: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMembershipWaitlist: {
    parameters: {
      query?: {
        isDisplay?: boolean;
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 곧 멤버쉽이 오픈 되어요 리스트 */
            membershipWaitlists: components["schemas"]["MembershipWaitlist"][];
          };
        };
      };
    };
  };
  getMasters: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 0으로 설정됩니다. */
        offset?: number;
        /** @description 빈 값으로 올 시 30으로 설정됩니다. */
        limit?: number;
        type?: components["schemas"]["RECOMMEND_TYPE"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            masters: components["schemas"]["Master"][];
          };
        };
      };
    };
  };
  getMasterByMasterCmsId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        masterCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            master: components["schemas"]["Master"];
          };
        };
      };
    };
  };
  getContentsByMasterId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 커뮤니티 컨텐츠와 멤버십 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        masterCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
            )[];
          };
        };
      };
    };
  };
  getContentsByMasterIdV2: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 커뮤니티 컨텐츠와 멤버십 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        masterCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
              | components["schemas"]["SeriesMetadataContent"]
            )[];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  getCommentsByMasterCmsId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 마스터의 전체 댓글을 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
      };
      header?: never;
      path: {
        masterCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comments: components["schemas"]["LoungeCommentData"][];
          };
        };
      };
    };
  };
  getMasterNoticesByMasterCmsId: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 0으로 설정됩니다. */
        offset?: number;
        /** @description 빈 값으로 올 시 10으로 설정됩니다. */
        limit?: number;
      };
      header?: never;
      path: {
        masterCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            masterNotices: components["schemas"]["MasterNoticesData"][];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  AdminController_getUserJoinCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 회원가입자 수 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  AdminController_getPerchasedUserCount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 결제자 수 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  AdminController_getSalesAmount: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 매출 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  AdminController_getSalesAmountV2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 매출V2, 231106 13시 이후 기준 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  AdminController_getPurchasedSafeAsset: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 안전자산반 구매자 수 231106 13시 이후 기준 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  AdminController_getPurchasedEconomicFreedom: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 경제자유반 구매자 수 231106 13시 이후 기준 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  AdminController_getUserJoinCountV2: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 회원가입자, 231106 13시 이후 기준 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getContents: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 커뮤니티 컨텐츠와 멤버십 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
            )[];
          };
        };
      };
    };
  };
  getContentsV2: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 커뮤니티 컨텐츠와 멤버십 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
            )[];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  getMostViewedContents: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 현재시간 기준 2일 전으로 설정됩니다 */
        startAt?: string;
        /** @description 빈 값으로 올 시 현재시간으로 설정됩니다. */
        endAt?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 컨텐츠 리스트 */
            contents: components["schemas"]["MostViewedContent"][];
          };
        };
      };
    };
  };
  getJoinRecommendationContents: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 컨텐츠 리스트 */
            contents: components["schemas"]["PickMetadataContent"][];
          };
        };
      };
    };
  };
  getPickedContents: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: components["schemas"]["PickMetadataContent"][];
          };
        };
      };
    };
  };
  getPickContentByCmsId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        cmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            content: components["schemas"]["PickDetailMetaDataContent"];
          };
        };
      };
    };
  };
  getFreeRecommendationContent: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: components["schemas"]["SecretMetadataContent"][];
          };
        };
      };
    };
  };
  getSecretContentByCmsId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        cmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            content: components["schemas"]["SecretDetailMetadataContent"];
          };
        };
      };
    };
  };
  getSecretContentByCmsIdV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        cmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            content: components["schemas"]["SecretDetailMetadataContentV2"];
          };
        };
      };
    };
  };
  getCommentsByContent: {
    parameters: {
      query: {
        contentCmsType: components["schemas"]["CMS_TYPE"];
        order: components["schemas"]["COMMENT_ORDER_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        contentCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comments: components["schemas"]["ContentCommentData"][];
          };
        };
      };
    };
  };
  getCommentsByContentV2: {
    parameters: {
      query: {
        contentCmsType: components["schemas"]["CMS_TYPE"];
        order: string;
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        contentCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comments: components["schemas"]["ContentCommentData"][];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  getCommentCountByContent: {
    parameters: {
      query: {
        contentCmsType: components["schemas"]["CMS_TYPE"];
      };
      header?: never;
      path: {
        contentCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default <integer> */
            commentCount: number;
          };
        };
      };
    };
  };
  getSecretContentsBySeriesCmsId: {
    parameters: {
      query: {
        /** @description true : 전체 컨텐츠, false : 안 읽은 컨텐츠만 */
        isRead: boolean;
        order: components["schemas"]["SECRET_ORDER_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        seriesCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: components["schemas"]["SeriesSecretMetadataContent"][];
          };
        };
      };
    };
  };
  getSeriesByCmsId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        seriesCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            content: components["schemas"]["SeriesDetailMetadataContent"];
          };
        };
      };
    };
  };
  getMasterByContentCmsId: {
    parameters: {
      query: {
        contentType: components["schemas"]["CMS_TYPE"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        contentCmsId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            master: components["schemas"]["Master"];
          };
        };
      };
    };
  };
  getContentsByFollows: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 커뮤니티 컨텐츠와 멤버십 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
            )[];
          };
        };
      };
    };
  };
  getContentsByFollowsV2: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 커뮤니티 컨텐츠와 멤버십 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
            )[];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  getMyProductsByUserId: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 활성화된 나의 상품을 가져옵니다. */
        status?: components["schemas"]["MY_PRODUCT_STATUS"];
        /** @description 빈 값으로 올 시 배너로 설정됩니다. */
        filter?: components["schemas"]["BANNER_TYPE"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            myProduct: components["schemas"]["MyProductMetadata"][];
          };
        };
      };
    };
  };
  getContentSchedulesByMyProducts: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 오늘 자정으로 설정됩니다 */
        startAt?: string;
        /** @description 빈 값으로 올 시 3일 후 자정으로 설정됩니다. */
        endAt?: string;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contentSchedules: components["schemas"]["ContentScheduleMetaData"][];
          };
        };
      };
    };
  };
  getContentSchedulesByFollows: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 오늘 자정으로 설정됩니다 */
        startAt?: string;
        /** @description 빈 값으로 올 시 3일 후 자정으로 설정됩니다. */
        endAt?: string;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contentSchedules: components["schemas"]["ContentScheduleMetaData"][];
          };
        };
      };
    };
  };
  getScrappedContentsByUserId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값으로 올 시 모든 컨텐츠를 가져옵니다. */
        type?: components["schemas"]["CMS_TYPE"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: (
              | components["schemas"]["PickMetadataContent"]
              | components["schemas"]["SecretMetadataContent"]
              | components["schemas"]["SeriesMetadataContent"]
            )[];
          };
        };
      };
    };
  };
  getCommentsByUserId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            comments: components["schemas"]["UserCommentData"][];
          };
        };
      };
    };
  };
  getAlarmHistoryByUserId: {
    parameters: {
      query: {
        filter: components["schemas"]["ALARM_HISTORY_FILTER"];
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            alarmHistory: components["schemas"]["UserAlarmHistory"][];
          };
        };
      };
    };
  };
  patchAlarmHistoryReadByUserId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  patchAlarmHistoryIsReadByAlarmHistoryId: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
        alarmHistoryId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getMyAssetsByUserId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
        /** @description 빈 값 또는 AVAILABLE로 올 시 모든 타입을 가져옵니다. */
        type?: components["schemas"]["ASSET_TYPE"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            myAssets: components["schemas"]["MyAssetMetadata"][];
          };
        };
      };
    };
  };
  getMyAssetsBalanceByUserId: {
    parameters: {
      query?: {
        /** @description 빈 값 또는 AVAILABLE로 올 시 모든 타입을 가져옵니다. */
        type?: components["schemas"]["ASSET_TYPE"];
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            balances: components["schemas"]["MyAssetBalanceMetadata"][];
          };
        };
      };
    };
  };
  getPurchasedContentsByUserId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contents: components["schemas"]["PurchasedSecretMetaData"][];
          };
        };
      };
    };
  };
  getFollowedMasterByUserId: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: {
        authorization?: string;
      };
      path: {
        userId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            masters: components["schemas"]["FollowedMaster"][];
            pagination: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  getContentSchedulesTargetDate: {
    parameters: {
      query?: {
        /**
         * @description 요청 포맷은 ISOString, 빈값으로 요청할 경우 현재 서버 시간을 기준 처리합니다.
         * @example 2024-05-14T08:13:57.687Z
         */
        targetDate?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contentSchedules: components["schemas"]["ContentScheduleMetaData"][];
          };
        };
      };
    };
  };
  getContentSchedules: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 금일 자정으로 설정됩니다. */
        startAt?: string;
        /** @description 빈 값으로 올 시 3일 후 자정으로 설정됩니다. */
        endAt?: string;
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            contentSchedules: components["schemas"]["ContentScheduleMetaData"][];
          };
        };
      };
    };
  };
  getNotices: {
    parameters: {
      query?: {
        offset?: number;
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            notices: components["schemas"]["NoticeMetadata"][];
          };
        };
      };
    };
  };
  signUpByWeb: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description subId and provider must be unique
           * @default <string>
           */
          subId: string;
          provider: components["schemas"]["ProviderTypeDto"];
          /**
           * @description must be unique
           * @default <string>
           */
          nickName: string;
          /**
           * Format: url
           * @default <url>
           */
          portraitURL: string;
          /**
           * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
           * @default <string>
           */
          password?: string;
          /**
           * @description 전화번호, provider 가 direct 일 경우 subId 와 같은 값 (유효성을 보장하지 않음)
           * @default <string>
           */
          phoneNumber?: string;
          /**
           * @description 마켓팅 수신 동의 여부
           * @default <boolean>
           */
          marketingAgree: boolean;
          signPath: components["schemas"]["SignPathType"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: components["schemas"]["AuthWebSignUpUserResponse"];
            tokens: components["schemas"]["AuthSignUpTokenResponse"];
            /**
             * @description Should recommendation
             * @default <boolean>
             */
            shouldRecommendation: boolean;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  signUpByApp: {
    parameters: {
      query: {
        provider: components["schemas"]["ProviderTypeDto"];
        signPath: components["schemas"]["SignPathType"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /**
           * @description 회원가입 시 입력한 아이디
           * @default <string>
           */
          subId: string;
          /**
           * @description 닉네임
           * @default <string>
           */
          nickName: string;
          /**
           * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
           * @default <string>
           */
          password?: string;
          /** @default <string> */
          phoneNumber?: string;
          deviceType: components["schemas"]["DeviceTypeDto"];
          /**
           * @description 디바이스 모델
           * @default <string>
           * @example Iphone 12 Pro Max
           */
          deviceModel?: string;
          /**
           * @description 디바이스 토큰
           * @default <string>
           */
          deviceToken: string;
          /**
           * @description 마켓팅 수신 동의 여부
           * @default <boolean>
           */
          isMarketingAgreed: boolean;
          /**
           * @description 야간 마켓팅 수신 동의 여부, 앱 요청으로 값만 추가 저장 X 사용 X
           * @default <boolean>
           */
          isNightMarketingAgreed: boolean;
          permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
          /**
           * @description 디바이스 아이디
           * @default <string>
           */
          deviceId: string;
          /** @default <binary> */
          portraitImage: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: components["schemas"]["AuthAppSignUpUserResponse"];
            tokens: components["schemas"]["AuthSignUpTokenResponse"];
            /**
             * @description Should recommendation
             * @default <boolean>
             */
            shouldRecommendation: boolean;
            /** @default <string> */
            password: string;
            pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  registerDevice: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          deviceType: components["schemas"]["DeviceTypeDto"];
          /**
           * @description FCM 토큰
           * @default <string>
           */
          deviceToken: string;
          /**
           * @description 디바이스 모델
           * @default <string>
           */
          deviceModel: string;
          /**
           * @description 기기 고유 번호
           * @default <string>
           */
          deviceId: string;
          permissionStatus: components["schemas"]["PermissionStatusTypeDto"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description 디바이스 모델 */
            pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
            /**
             * @description 삭제 여부
             * @default <boolean>
             */
            deleted: boolean;
            /**
             * @description 디바이스 모델
             * @default <string>
             */
            deviceModel: string;
            /**
             * @description 유저 아이디
             * @default <string>
             */
            userId: string;
            /**
             * @description 국가
             * @default <string>
             */
            country: string;
            /**
             * @description 언어
             * @default <string>
             */
            language: string;
            /** @default <integer> */
            timezone: number;
            deviceType: components["schemas"]["DeviceTypeDto"];
            /**
             * @description FCM 토큰
             * @default <string>
             */
            deviceToken: string;
            /**
             * @description device의 아이디
             * @default <string>
             */
            id: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description refresh token
           * @default <string>
           */
          refreshToken: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            access: components["schemas"]["AuthTokenResponse"];
            refresh: components["schemas"]["AuthTokenResponse"];
          };
        };
      };
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  directToLogin: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description subId and provider must be unique
           * @default <string>
           */
          subId: string;
          /**
           * Format: password
           * @default <password>
           */
          password: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: components["schemas"]["AuthAppSignUpUserResponse"];
            /**
             * @description 인증 성공 여부
             * @default <boolean>
             */
            auth: boolean;
            /**
             * @description 가입 여부
             * @default <boolean>
             */
            join: boolean;
            /**
             * @description subId (가입이 되어 있는 경우 subId 를 보내준다.)
             * @default <string>
             */
            subId: string;
            /**
             * @description accessToken
             * @default <string>
             */
            accessToken: string;
            /**
             * Format: date-time
             * @description accessExpires
             * @default <dateTime>
             */
            accessExpires: string;
            /**
             * @description refreshToken
             * @default <string>
             */
            refreshToken: string;
            /**
             * Format: date-time
             * @description refreshExpires
             * @default <dateTime>
             */
            refreshExpires: string;
            /**
             * @description Should recommendation
             * @default <boolean>
             */
            shouldRecommendation: boolean;
          };
        };
      };
      /** @description 존재하지 않은 유저입니다. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 400 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description 비밀번호가 일치하지 않습니다. */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  validateToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderTypeDto"];
            /**
             * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
             * @default <string>
             */
            password: string;
            /**
             * Format: url
             * @description 업로드 한 유저의 프로필 URL
             * @default <url>
             */
            portraitURL: string;
            /**
             * @description 닉네임
             * @default <string>
             */
            nickName: string;
            /** @default <string> */
            phoneNumber: string;
            pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
            /**
             * @description DataBase에 저장된 회원의 id
             * @default <string>
             */
            id: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  updateMarketingAgree: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: components["schemas"]["MarketingAgreeTypeDto"];
          /**
           * @description 동의 여부
           * @default <boolean>
           */
          value: boolean;
          /**
           * Format: date-time
           * @description 생성일
           * @default <dateTime>
           */
          createdAt: string;
          /**
           * Format: date-time
           * @description 수정일
           * @default <dateTime>
           */
          updatedAt: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            name: components["schemas"]["MarketingAgreeTypeDto"];
            /**
             * @description 동의 여부
             * @default <boolean>
             */
            value: boolean;
            /**
             * Format: date-time
             * @description 생성일
             * @default <dateTime>
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description 수정일
             * @default <dateTime>
             */
            updatedAt: string;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  getMyInfo: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            provider: components["schemas"]["LOGIN_TYPE"];
            /**
             * @default <string>
             * @example google_subId_test
             */
            subId: string;
            /**
             * @default <string>
             * @example 1
             */
            id: string;
            /**
             * @default <string>
             * @example 행복한 투자자
             */
            nickName: string;
            /**
             * Format: url
             * @default <url>
             * @example https://us-backend.s3.ap-northeast-2.amazonaws.com/Avator10.png
             */
            portraitUrl: string;
            /**
             * @default <string>
             * @example 01033334444
             */
            phoneNumber: string;
            /**
             * Format: email
             * @default <email>
             * @example test@gmail.com
             */
            email: string;
            /** @default <integer> */
            currentAsset: number;
            role: components["schemas"]["USER_ROLE"];
            /**
             * @description 튜토리얼 완료 여부
             * @default <boolean>
             */
            isFinishedTUT: boolean;
          };
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  withdraw: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  signOutV2: {
    parameters: {
      query?: never;
      header?: {
        authorization?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 성공 */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 401 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  checkAuthCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 핸드폰 번호를 숫자만 입력해주세요
           * @default <string>
           */
          phoneNumber: string;
          /** @default <integer> */
          code: number;
          provider: components["schemas"]["ProviderTypeDto"];
        };
      };
    };
    responses: {
      /** @description 성공 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderTypeDto"];
            /** @default <integer> */
            code: number;
            /** @default <string> */
            phoneNumber: string;
            /**
             * Format: date-time
             * @default <dateTime>
             */
            expires: string;
            /** @default <string> */
            id: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  generateAuthCode: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 유저 subId
           * @default <string>
           */
          subId?: string;
          type: components["schemas"]["AuthCodeTypeV2Dto"];
          /**
           * @description 핸드폰 번호를 숫자만 입력해주세요
           * @default <string>
           */
          phoneNumber: string;
          provider: components["schemas"]["ProviderTypeDto"];
        };
      };
    };
    responses: {
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  validatePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 회원가입 시 subId
           * @default <string>
           */
          subId: string;
          /**
           * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
           * @default <string>
           */
          password: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description New password is same as old password */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 400 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  updatePassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 회원가입 시 subId
           * @default <string>
           */
          subId: string;
          /**
           * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자, 특수문자가 포함되어야합니다.
           * @default <string>
           */
          password: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 회원가입 시 입력한 아이디
             * @default <string>
             */
            subId: string;
            provider: components["schemas"]["ProviderType"];
            /**
             * @description 최소 8자리 이상, 최소 하나의 문자와 하나의 숫자가 포함되어야 합니다.
             * @default <string>
             */
            password: string;
            /**
             * Format: url
             * @description 업로드 한 유저의 프로필 URL
             * @default <url>
             */
            portraitURL: string;
            /**
             * @description 닉네임
             * @default <string>
             */
            nickName: string;
            /** @default <string> */
            phoneNumber: string;
            pushTopics: components["schemas"]["AuthPushTopicsResponse"][];
            /**
             * @description 이전 회차 id, 없으면 null
             * @default <string>
             */
            id: string;
          };
        };
      };
      /** @description New password is same as old password */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @default 400 */
            code: number;
            /** @default <string> */
            message: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  checkDuplicatePhoneNumber: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description 전화번호
           * @default <string>
           */
          phoneNumber: string;
        };
      };
    };
    responses: {
      /** @description 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description 전화번호 중복 여부
             * @default <boolean>
             */
            isDuplicate: boolean;
            /** @description 중복된 유저 정보 배열 */
            users?: components["schemas"]["AuthDuplicateUserResponse"][] | null;
          };
        };
      };
    };
  };
  getFaqs: {
    parameters: {
      query?: {
        /** @description 빈 값으로 올 시 모든 FAQ를 가져옵니다. */
        type?: components["schemas"]["FAQ_TYPE"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            faqs: components["schemas"]["FAQData"][];
          };
        };
      };
    };
  };
}
